fefd5f76302adcc425b2b6e7e7d23587cfc0083e
publify@@publify
diff --git a/publify_core/app/helpers/base_helper.rb b/publify_core/app/helpers/base_helper.rb
index b7ba0a01c2..53c9729487 100644
--- a/publify_core/app/helpers/base_helper.rb
+++ b/publify_core/app/helpers/base_helper.rb
@@ -240,10 +240,15 @@ def fetch_html_content_for_feeds(item, this_blog)
   end
 
   def nofollowify_links(string)
+    raise ArgumentError, "string", "must be html_safe" unless string.html_safe?
+
     if this_blog.dofollowify
       string
     else
-      string.gsub(//i, '')
+      followify_scrubber = Loofah::Scrubber.new do |node|
+        node.set_attribute "rel", "nofollow" if node.name == "a"
+      end
+      sanitize h(string), scrubber: followify_scrubber
     end
   end
 
diff --git a/publify_core/app/models/content_base.rb b/publify_core/app/models/content_base.rb
index 7640918303..5349c44d71 100644
--- a/publify_core/app/models/content_base.rb
+++ b/publify_core/app/models/content_base.rb
@@ -5,6 +5,12 @@ def self.included(base)
     base.extend ClassMethods
   end
 
+  class ContentTextHelpers
+    include ActionView::Helpers::UrlHelper
+    include ActionView::Helpers::TextHelper
+    include ActionView::Helpers::SanitizeHelper
+  end
+
   attr_accessor :just_changed_published_status
   alias just_changed_published_status? just_changed_published_status
 
@@ -39,10 +45,10 @@ def generate_html(field, text = nil)
     html_postprocess(field, html).to_s
   end
 
-  # Post-process the HTML.  This is a noop by default, but Comment overrides it
-  # to enforce HTML sanity.
+  # Post-process the HTML
   def html_postprocess(_field, html)
-    html
+    helper = ContentTextHelpers.new
+    helper.sanitize html
   end
 
   def html_preprocess(_field, html)
diff --git a/publify_core/app/models/feedback.rb b/publify_core/app/models/feedback.rb
index 5c0b88ae41..984477c7af 100644
--- a/publify_core/app/models/feedback.rb
+++ b/publify_core/app/models/feedback.rb
@@ -11,12 +11,6 @@ class Feedback < ApplicationRecord
   include PublifyGuid
   include ContentBase
 
-  class ContentTextHelpers
-    include ActionView::Helpers::UrlHelper
-    include ActionView::Helpers::TextHelper
-    include ActionView::Helpers::SanitizeHelper
-  end
-
   validate :feedback_not_closed, on: :create
   validates :article, presence: true
 
diff --git a/publify_core/app/views/articles/_article_excerpt.html.erb b/publify_core/app/views/articles/_article_excerpt.html.erb
index ca51d07afb..afea7619ef 100644
--- a/publify_core/app/views/articles/_article_excerpt.html.erb
+++ b/publify_core/app/views/articles/_article_excerpt.html.erb
@@ -5,7 +5,7 @@
       <%= link_to_permalink article, t('.continue_reading') %>

   <% else %>
-    <%= raw article.html(:body) %>
+    <%= article.html(:body) %>
     <% if article.extended? %>
       
<%= link_to_permalink article, t('.continue_reading') %>
diff --git a/publify_core/app/views/articles/_full_article_content.html.erb b/publify_core/app/views/articles/_full_article_content.html.erb
index fc1169bc0e..7a881fa7a7 100644
--- a/publify_core/app/views/articles/_full_article_content.html.erb
+++ b/publify_core/app/views/articles/_full_article_content.html.erb
@@ -1,4 +1,4 @@
 <% cache article do %>
-  <%= raw article.html(:body) %>
-  <%= raw article.html(:extended) %>
+  <%= article.html(:body) %>
+  <%= article.html(:extended) %>
 <% end %>
diff --git a/publify_core/app/views/articles/view_page.html.erb b/publify_core/app/views/articles/view_page.html.erb
index 9657e94043..cc5b85eff8 100644
--- a/publify_core/app/views/articles/view_page.html.erb
+++ b/publify_core/app/views/articles/view_page.html.erb
@@ -1,3 +1,3 @@
 
-  <%= raw html @page %>
+  <%= html @page %>
 
diff --git a/publify_core/app/views/comments/_comment.html.erb b/publify_core/app/views/comments/_comment.html.erb
index a9a8b705d3..7f01dcc853 100644
--- a/publify_core/app/views/comments/_comment.html.erb
+++ b/publify_core/app/views/comments/_comment.html.erb
@@ -6,7 +6,7 @@
     <%= t('.said') %> <%= display_date_and_time comment.created_at %>:
     

-      <%= raw nofollowify_links comment.generate_html(:body) %>
+      <%= nofollowify_links comment.generate_html(:body) %>
       <% unless comment.published? %>
         
           <%= t('.this_comment_has_been_flagged_for_moderator_approval') %>
diff --git a/publify_core/app/views/notes/_note.html.erb b/publify_core/app/views/notes/_note.html.erb
index a1c28a9fbd..389d96c82b 100644
--- a/publify_core/app/views/notes/_note.html.erb
+++ b/publify_core/app/views/notes/_note.html.erb
@@ -1,7 +1,7 @@
 <% cache [note, note.user] do %>
   
     <%= author_picture note %>
-    <%= raw note.html(:body) %>
+    <%= note.html(:body) %>


         <%= link_to_permalink(note, display_date_and_time(note.published_at)) %> |
diff --git a/publify_core/app/views/notes/index.html.erb b/publify_core/app/views/notes/index.html.erb
index 9d7f385d51..7ff3a9db1b 100644
--- a/publify_core/app/views/notes/index.html.erb
+++ b/publify_core/app/views/notes/index.html.erb
@@ -2,7 +2,7 @@
   <% for note in @notes %>
   

-      <%= raw note.html(:body) %>
+      <%= note.html(:body) %>

<%= link_to_permalink(note, display_date_and_time(note.published_at)) %>

diff --git a/publify_core/spec/helpers/base_helper_spec.rb b/publify_core/spec/helpers/base_helper_spec.rb
index 829bd3b7e6..3e0a8408cd 100644
--- a/publify_core/spec/helpers/base_helper_spec.rb
+++ b/publify_core/spec/helpers/base_helper_spec.rb
@@ -160,6 +160,8 @@ def parse_request(_contents, _request_params)
   end
 
   describe "#nofollowify_links" do
+    let(:original_html) { 'my blog'.html_safe }
+
     before do
       @blog = create :blog
     end
@@ -168,16 +170,28 @@ def parse_request(_contents, _request_params)
       @blog.dofollowify = false
       @blog.save
 
-      expect(nofollowify_links('my blog')).
-        to eq('my blog')
+      result = nofollowify_links(original_html)
+
+      aggregate_failures do
+        expect(result).to eq('my blog')
+        expect(result).to be_html_safe
+      end
     end
 
-    it "with dofollowify enabled, links should be nofollowed" do
+    it "with dofollowify enabled, links should be not nofollowed" do
       @blog.dofollowify = true
       @blog.save
 
-      expect(nofollowify_links('my blog')).
-        to eq('my blog')
+      result = nofollowify_links(original_html)
+
+      aggregate_failures do
+        expect(result).to eq('my blog')
+        expect(result).to be_html_safe
+      end
+    end
+
+    it "does not accept unsafe html" do
+      expect { nofollowify_links("just an unsafe string") }.to raise_error ArgumentError
     end
   end
 
diff --git a/publify_core/spec/models/article_spec.rb b/publify_core/spec/models/article_spec.rb
index 2798258e29..aeacc71bc7 100644
--- a/publify_core/spec/models/article_spec.rb
+++ b/publify_core/spec/models/article_spec.rb
@@ -398,6 +398,14 @@
     end
   end
 
+  describe "#html" do
+    let(:article) { build_stubbed :article }
+
+    it "returns an html_safe string" do
+      expect(article.html).to be_html_safe
+    end
+  end
+
   describe "#comment_url" do
     it "renders complete url of comment" do
       article = build_stubbed(:article, id: 123)
diff --git a/publify_core/spec/models/comment_spec.rb b/publify_core/spec/models/comment_spec.rb
index dcf967f16c..138d037feb 100644
--- a/publify_core/spec/models/comment_spec.rb
+++ b/publify_core/spec/models/comment_spec.rb
@@ -257,10 +257,45 @@ def valid_comment(options = {})
     end
   end
 
-  describe "#generate_html" do
+  describe "#html" do
     it "renders email addresses in the body" do
       comment = build_stubbed(:comment, body: "foo@example.com")
-      expect(comment.generate_html(:body)).to match(/mailto:/)
+      expect(comment.html).to match(/mailto:/)
+    end
+
+    it "returns an html_safe string" do
+      comment = build_stubbed(:comment, body: "Just a comment")
+      expect(comment.html).to be_html_safe
+    end
+
+    context "with an evil comment" do
+      let(:comment) { build_stubbed :comment, body: "Test foo " }
+      let(:blog) { comment.article.blog }
+
+      ["", "textile", "markdown", "smartypants", "markdown smartypants"].each do |filter|
+        it "rejects xss attempt with filter '#{filter}'" do
+          blog.comment_text_filter = filter
+
+          ActiveSupport::Deprecation.silence do
+            assert comment.html(:body) !~ /