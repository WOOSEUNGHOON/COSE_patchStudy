a66977c76043fcff4a8f69c4b65988272d27c01f
portainer@@agent@@pull@@225
diff --git a/agent.go b/agent.go
index b69900ce..029b7530 100644
--- a/agent.go
+++ b/agent.go
@@ -122,6 +122,7 @@ type (
 
 	// DigitalSignatureService is used to validate digital signatures.
 	DigitalSignatureService interface {
+		IsAssociated() bool
 		VerifySignature(signature, key string) (bool, error)
 	}
 
@@ -178,6 +179,8 @@ const (
 	DefaultAgentPort = "9001"
 	// DefaultLogLevel is the default logging level.
 	DefaultLogLevel = "INFO"
+	// DefaultAgentSecurityShutdown is the default time after which the API server will shutdown if not associated with a Portainer instance
+	DefaultAgentSecurityShutdown = "3d"
 	// DefaultEdgeSecurityShutdown is the default time after which the Edge server will shutdown if no key is specified
 	DefaultEdgeSecurityShutdown = 15
 	// DefaultEdgeServerAddr is the default address used by the Edge server.
diff --git a/cmd/agent/main.go b/cmd/agent/main.go
index 1a471478..4b2f66fa 100644
--- a/cmd/agent/main.go
+++ b/cmd/agent/main.go
@@ -1,8 +1,11 @@
 package main
 
 import (
+	"errors"
 	"fmt"
 	"log"
+	gohttp "net/http"
+	"runtime"
 	"time"
 
 	"github.com/portainer/agent"
@@ -232,10 +235,12 @@ func main() {
 	}
 
 	err = startAPIServer(config)
-	if err != nil {
+	if err != nil && !errors.Is(err, gohttp.ErrServerClosed) {
 		log.Fatalf("[ERROR] [main,http] [message: Unable to start Agent API server] [error: %s]", err)
 	}
 
+	runtime.Goexit()
+
 	// !API
 }
 
diff --git a/crypto/ecdsa.go b/crypto/ecdsa.go
index 2f37ca00..7ed3b616 100644
--- a/crypto/ecdsa.go
+++ b/crypto/ecdsa.go
@@ -26,6 +26,12 @@ func NewECDSAService(secret string) *ECDSAService {
 	}
 }
 
+// IsAssociated tells if the service is associated with a public key
+// or if it's secured behind  a secret
+func (service *ECDSAService) IsAssociated() bool {
+	return service.publicKey != nil || service.secret != ""
+}
+
 // VerifySignature is used to verify a digital signature using a specified public
 // key. The public key specified as a parameter must be hexadecimal encoded.
 // The public key will be decoded and parsed as DER data. If the service is not
diff --git a/http/server.go b/http/server.go
index d79cf51f..f0de56e0 100644
--- a/http/server.go
+++ b/http/server.go
@@ -1,6 +1,7 @@
 package http
 
 import (
+	"context"
 	"crypto/tls"
 	"log"
 	"net/http"
@@ -134,5 +135,26 @@ func (server *APIServer) StartSecured() error {
 		WriteTimeout: 30 * time.Minute,
 	}
 
+	go func() {
+		agentSecurityShutdown := 10
+
+		timer1 := time.NewTimer(time.Duration(agentSecurityShutdown) * time.Second)
+		<-timer1.C
+
+		if !server.signatureService.IsAssociated() {
+			log.Printf("[INFO] [main,http] [message: Shutting down API server as no client was associated after %d minutes , keeping alive to prevent restart by docker/kubernetes]", agentSecurityShutdown)
+
+			err := httpServer.Shutdown(context.Background())
+			if err != nil {
+				log.Fatalf("[ERROR] [server] [message: failed shutting down server] [error: %s]", err)
+			}
+
+			// Keep alive
+			for {
+				time.Sleep(time.Second)
+			}
+		}
+	}()
+
 	return httpServer.ListenAndServeTLS(agent.TLSCertPath, agent.TLSKeyPath)
 }
