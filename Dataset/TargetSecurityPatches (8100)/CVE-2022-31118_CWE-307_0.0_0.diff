6eb692da7fe73c899cb6a8d2aa045eddb1f14018
nextcloud@@server@@pull@@32843
diff --git a/apps/cloud_federation_api/lib/Controller/RequestHandlerController.php b/apps/cloud_federation_api/lib/Controller/RequestHandlerController.php
index 53448119af3d..ef77f2fa317d 100644
--- a/apps/cloud_federation_api/lib/Controller/RequestHandlerController.php
+++ b/apps/cloud_federation_api/lib/Controller/RequestHandlerController.php
@@ -157,19 +157,23 @@ public function addShare($shareWith, $name, $description, $providerId, $owner, $
 			$shareWith = $this->mapUid($shareWith);
 
 			if (!$this->userManager->userExists($shareWith)) {
-				return new JSONResponse(
+				$response = new JSONResponse(
 					['message' => 'User "' . $shareWith . '" does not exists at ' . $this->urlGenerator->getBaseUrl()],
 					Http::STATUS_BAD_REQUEST
 				);
+				$response->throttle();
+				return $response;
 			}
 		}
 
 		if ($shareType === 'group') {
 			if (!$this->groupManager->groupExists($shareWith)) {
-				return new JSONResponse(
+				$response = new JSONResponse(
 					['message' => 'Group "' . $shareWith . '" does not exists at ' . $this->urlGenerator->getBaseUrl()],
 					Http::STATUS_BAD_REQUEST
 				);
+				$response->throttle();
+				return $response;
 			}
 		}
 
@@ -253,10 +257,12 @@ public function receiveNotification($notificationType, $resourceType, $providerI
 				Http::STATUS_BAD_REQUEST
 			);
 		} catch (ShareNotFound $e) {
-			return new JSONResponse(
+			$response = new JSONResponse(
 				['message' => $e->getMessage()],
 				Http::STATUS_BAD_REQUEST
 			);
+			$response->throttle();
+			return $response;
 		} catch (ActionNotSupportedException $e) {
 			return new JSONResponse(
 				['message' => $e->getMessage()],
@@ -265,7 +271,9 @@ public function receiveNotification($notificationType, $resourceType, $providerI
 		} catch (BadRequestException $e) {
 			return new JSONResponse($e->getReturnMessage(), Http::STATUS_BAD_REQUEST);
 		} catch (AuthenticationFailedException $e) {
-			return new JSONResponse(["message" => "RESOURCE_NOT_FOUND"], Http::STATUS_FORBIDDEN);
+			$response = new JSONResponse(['message' => 'RESOURCE_NOT_FOUND'], Http::STATUS_FORBIDDEN);
+			$response->throttle();
+			return $response;
 		} catch (\Exception $e) {
 			return new JSONResponse(
 				['message' => 'Internal error at ' . $this->urlGenerator->getBaseUrl()],
