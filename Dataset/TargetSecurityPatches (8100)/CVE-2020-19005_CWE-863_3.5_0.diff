b2b4415e2e59b6f18b0a62b633e71c96d63c43ba
94fzb@@zrlog
diff --git a/service/src/main/java/com/zrlog/service/PluginHelper.java b/common/src/main/java/com/zrlog/web/util/PluginHelper.java
similarity index 74%
rename from service/src/main/java/com/zrlog/service/PluginHelper.java
rename to common/src/main/java/com/zrlog/web/util/PluginHelper.java
index 6af816400..e29591388 100644
--- a/service/src/main/java/com/zrlog/service/PluginHelper.java
+++ b/common/src/main/java/com/zrlog/web/util/PluginHelper.java
@@ -1,8 +1,7 @@
-package com.zrlog.service;
+package com.zrlog.web.util;
 
-import com.jfinal.core.JFinal;
 import com.zrlog.common.vo.AdminTokenVO;
-import com.zrlog.model.User;
+import com.zrlog.util.BlogBuildInfoUtil;
 import com.zrlog.util.I18nUtil;
 import com.zrlog.util.ZrLogUtil;
 
@@ -12,17 +11,14 @@
 
 public class PluginHelper {
 
-    public static Map genHeaderMapByRequest(HttpServletRequest request) {
+    public static Map genHeaderMapByRequest(HttpServletRequest request, AdminTokenVO adminTokenVO) {
         Map map = new HashMap<>();
-        AdminTokenVO adminTokenVO = AdminTokenThreadLocal.getUser();
         if (adminTokenVO != null) {
-            User user = User.dao.findById(adminTokenVO.getUserId());
-            map.put("LoginUserName", user.get("userName").toString());
             map.put("LoginUserId", adminTokenVO.getUserId() + "");
         }
         map.put("IsLogin", (adminTokenVO != null) + "");
         map.put("Current-Locale", I18nUtil.getCurrentLocale());
-        map.put("Blog-Version", ((Map) JFinal.me().getServletContext().getAttribute("zrlog")).get("version").toString());
+        map.put("Blog-Version", BlogBuildInfoUtil.getVersion());
         if (request != null) {
             String fullUrl = ZrLogUtil.getFullUrl(request);
             if (request.getQueryString() != null) {
diff --git a/pom.xml b/pom.xml
new file mode 100644
index 000000000..4a34cca98
--- /dev/null
+++ b/pom.xml
@@ -0,0 +1,104 @@
+
+    4.0.0
+    com.zrlog
+    zrlog
+    2.1.0
+    
+        web
+        service
+        common
+        data
+    
+    pom
+    zrlog
+    ZrLog是使用Java开发的博客/CMS程序，具有简约，易用，组件化，内存占用低等特点。自带Markdown编辑器，让更多的精力放在写作上，而不是花费大量时间在学习程序的使用上。
+    
+    https://www.zrlog.com
+
+    
+        1.8
+        3.3
+        UTF-8
+        3.1.0
+    
+
+    
+        
+            xiaochun
+            xchun90@163.com
+            http://blog.94fzb.com
+            
+                owner
+            
+        
+        
+            weekdragon
+            790774717@qq.com
+            https://www.weekdragon.cn
+            
+                developer
+            
+        
+        
+            e-lionel
+            lionel0724@163.com
+            https://github.com/e-lionel
+            
+                reporter
+            
+        
+    
+
+    
+        Github Issue
+        http://github.com/94fzb/zrlog
+    
+
+    
+        
+            The Apache Software License, Version 2.0
+            http://apache.org/licenses/LICENSE-2.0.txt
+        
+    
+
+    
+        
+            org.slf4j
+            slf4j-api
+            1.7.12
+        
+        
+            org.slf4j
+            slf4j-log4j12
+            1.7.12
+        
+        
+            log4j
+            log4j
+            1.2.17
+        
+        
+            junit
+            junit
+            4.12
+            test
+        
+    
+
+    
+        src/main/java
+        src/test/java
+        
+            
+                maven-compiler-plugin
+                
+                    ${java.version}
+                    ${java.version}
+                    UTF-8
+                
+                2.3.2
+            
+        
+    
+
\ No newline at end of file
diff --git a/service/src/main/java/com/zrlog/service/UploadService.java b/service/src/main/java/com/zrlog/service/UploadService.java
index 09c4004ee..a02702204 100644
--- a/service/src/main/java/com/zrlog/service/UploadService.java
+++ b/service/src/main/java/com/zrlog/service/UploadService.java
@@ -4,6 +4,7 @@
 import com.hibegin.common.util.http.handle.HttpJsonArrayHandle;
 import com.zrlog.common.Constants;
 import com.zrlog.common.response.UploadFileResponse;
+import com.zrlog.web.util.PluginHelper;
 import org.apache.log4j.Logger;
 
 import javax.servlet.http.HttpServletRequest;
@@ -24,7 +25,7 @@ public UploadFileResponse getCloudUrl(String contextPath, String uri, String fin
         String url;
         try {
             List urls = HttpUtil.getInstance().sendGetRequest(Constants.pluginServer + "/service", map
-                    , new HttpJsonArrayHandle(), PluginHelper.genHeaderMapByRequest(request)).getT();
+                    , new HttpJsonArrayHandle(), PluginHelper.genHeaderMapByRequest(request, AdminTokenThreadLocal.getUser())).getT();
             if (urls != null && !urls.isEmpty()) {
                 url = (String) urls.get(0).get("url");
                 if (!url.startsWith("https://") && !url.startsWith("http://")) {
diff --git a/web/src/main/java/com/zrlog/web/handler/PluginHandler.java b/web/src/main/java/com/zrlog/web/handler/PluginHandler.java
index 2beb4db26..32f22374a 100644
--- a/web/src/main/java/com/zrlog/web/handler/PluginHandler.java
+++ b/web/src/main/java/com/zrlog/web/handler/PluginHandler.java
@@ -10,8 +10,8 @@
 import com.zrlog.model.User;
 import com.zrlog.service.AdminTokenService;
 import com.zrlog.service.AdminTokenThreadLocal;
-import com.zrlog.service.PluginHelper;
 import com.zrlog.util.BlogBuildInfoUtil;
+import com.zrlog.web.util.PluginHelper;
 import org.apache.http.Header;
 import org.apache.http.client.methods.CloseableHttpResponse;
 import org.apache.log4j.Logger;
@@ -52,8 +52,9 @@ public void handle(String target, HttpServletRequest request, HttpServletRespons
             }
         }
         if (isPluginPath) {
+            Map.Entry entry = null;
             try {
-                Map.Entry entry = adminTokenService.getAdminTokenVOUserEntry(request);
+                entry = adminTokenService.getAdminTokenVOUserEntry(request);
                 if (entry != null) {
                     adminTokenService.setAdminToken(entry.getValue(), entry.getKey().getSessionId(), entry.getKey().getProtocol(), request, response);
                 }
@@ -72,6 +73,9 @@ public void handle(String target, HttpServletRequest request, HttpServletRespons
                 }
             } finally {
                 isHandled[0] = true;
+                if (entry != null) {
+                    AdminTokenThreadLocal.remove();
+                }
             }
         } else {
             this.next.handle(target, request, response, isHandled);
@@ -153,13 +157,13 @@ public static CloseResponseHandle getContext(String uri, String method, HttpServ
         HttpUtil httpUtil = disableRedirect ? HttpUtil.getDisableRedirectInstance() : HttpUtil.getInstance();
         //GET请求不关心request.getInputStream() 的数据
         if (method.equals(request.getMethod()) && "GET".equalsIgnoreCase(method)) {
-            httpResponse = httpUtil.sendGetRequest(pluginServerHttp + uri, request.getParameterMap(), handle, PluginHelper.genHeaderMapByRequest(request)).getT();
+            httpResponse = httpUtil.sendGetRequest(pluginServerHttp + uri, request.getParameterMap(), handle, PluginHelper.genHeaderMapByRequest(request, AdminTokenThreadLocal.getUser())).getT();
         } else {
             //如果是表单数据提交不关心请求头，反之将所有请求头都发到插件服务
             if ("application/x-www-form-urlencoded".equals(request.getContentType())) {
-                httpResponse = httpUtil.sendPostRequest(pluginServerHttp + uri, request.getParameterMap(), handle, PluginHelper.genHeaderMapByRequest(request)).getT();
+                httpResponse = httpUtil.sendPostRequest(pluginServerHttp + uri, request.getParameterMap(), handle, PluginHelper.genHeaderMapByRequest(request, AdminTokenThreadLocal.getUser())).getT();
             } else {
-                httpResponse = httpUtil.sendPostRequest(pluginServerHttp + uri + "?" + request.getQueryString(), IOUtil.getByteByInputStream(request.getInputStream()), handle, PluginHelper.genHeaderMapByRequest(request)).getT();
+                httpResponse = httpUtil.sendPostRequest(pluginServerHttp + uri + "?" + request.getQueryString(), IOUtil.getByteByInputStream(request.getInputStream()), handle, PluginHelper.genHeaderMapByRequest(request, AdminTokenThreadLocal.getUser())).getT();
             }
         }
         //添加插件服务的HTTP响应头到调用者响应头里面
