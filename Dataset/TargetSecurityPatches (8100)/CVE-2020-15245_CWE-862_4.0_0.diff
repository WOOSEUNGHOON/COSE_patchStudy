60636d711a4011e8694d10d201b53632c7e8ecaf
Sylius@@Sylius
diff --git a/features/account/customer_account/editing_customer_profile.feature b/features/account/customer_account/editing_customer_profile.feature
index 9884eb4c380..cf9080f6594 100644
--- a/features/account/customer_account/editing_customer_profile.feature
+++ b/features/account/customer_account/editing_customer_profile.feature
@@ -19,9 +19,21 @@ Feature: Editing a customer profile
         And my name should be "Will Conway"
 
     @ui
-    Scenario: Changing my email
+    Scenario: Changing my email if channel requires verification
         When I want to modify my profile
         And I specify the customer email as "frank@underwood.com"
         And I save my changes
         Then I should be notified that it has been successfully edited
+        And I should be notified that the verification email has been sent
+        And it should be sent to "frank@underwood.com"
+        And I should not be logged in
+
+    @ui
+    Scenario: Changing my email if channel does not require verification
+        Given "United States" channel has account verification disabled
+        When I want to modify my profile
+        And I specify the customer email as "frank@underwood.com"
+        And I save my changes
+        Then I should be notified that it has been successfully edited
+        And my account should not be verified
         And my email should be "frank@underwood.com"
diff --git a/src/Sylius/Behat/Context/Ui/Shop/VerificationContext.php b/src/Sylius/Behat/Context/Ui/Shop/VerificationContext.php
new file mode 100644
index 00000000000..3278a372ccb
--- /dev/null
+++ b/src/Sylius/Behat/Context/Ui/Shop/VerificationContext.php
@@ -0,0 +1,163 @@
+sharedStorage = $sharedStorage;
+        $this->dashboardPage = $dashboardPage;
+        $this->verificationPage = $verificationPage;
+        $this->notificationChecker = $notificationChecker;
+    }
+
+    /**
+     * @Then I should be notified that my account has been created and the verification email has been sent
+     */
+    public function iShouldBeNotifiedThatNewAccountHasBeenSuccessfullyCreated(): void
+    {
+        $this->notificationChecker->checkNotification(
+            'Thank you for registering, check your email to verify your account.',
+            NotificationType::success()
+        );
+    }
+
+    /**
+     * @Then /^my account should be verified$/
+     */
+    public function myAccountShouldBeVerified(): void
+    {
+        Assert::true($this->dashboardPage->isVerified());
+    }
+
+    /**
+     * @When /^(I) try to verify my account using the link from this email$/
+     */
+    public function iUseItToVerify(ShopUserInterface $user): void
+    {
+        $this->verificationPage->verifyAccount($user->getEmailVerificationToken());
+    }
+
+    /**
+     * @When I verify my account using link sent to :customer
+     */
+    public function iVerifyMyAccount(CustomerInterface $customer): void
+    {
+        $user = $customer->getUser();
+        Assert::notNull($user, 'No account for given customer');
+
+        $this->iUseItToVerify($user);
+    }
+
+    /**
+     * @When I resend the verification email
+     */
+    public function iResendVerificationEmail(): void
+    {
+        $this->dashboardPage->open();
+        $this->dashboardPage->pressResendVerificationEmail();
+    }
+
+    /**
+     * @When I use the verification link from the first email to verify
+     */
+    public function iUseVerificationLinkFromFirstEmailToVerify(): void
+    {
+        $token = $this->sharedStorage->get('verification_token');
+
+        $this->verificationPage->verifyAccount($token);
+    }
+
+    /**
+     * @When I (try to )verify using :token token
+     */
+    public function iTryToVerifyUsing(string $token): void
+    {
+        $this->verificationPage->verifyAccount($token);
+    }
+
+    /**
+     * @Then /^(?:my|his|her) account should not be verified$/
+     */
+    public function myAccountShouldNotBeVerified(): void
+    {
+        $this->dashboardPage->open();
+
+        Assert::false($this->dashboardPage->isVerified());
+    }
+
+    /**
+     * @Then I should not be able to resend the verification email
+     */
+    public function iShouldBeUnableToResendVerificationEmail(): void
+    {
+        $this->dashboardPage->open();
+
+        Assert::false($this->dashboardPage->hasResendVerificationEmailButton());
+    }
+
+    /**
+     * @Then I should be notified that the verification was successful
+     */
+    public function iShouldBeNotifiedThatTheVerificationWasSuccessful(): void
+    {
+        $this->notificationChecker->checkNotification('has been successfully verified.', NotificationType::success());
+    }
+
+    /**
+     * @Then I should be notified that the verification token is invalid
+     */
+    public function iShouldBeNotifiedThatTheVerificationTokenIsInvalid(): void
+    {
+        $this->notificationChecker->checkNotification('The verification token is invalid.', NotificationType::failure());
+    }
+
+    /**
+     * @Then I should be notified that the verification email has been sent
+     */
+    public function iShouldBeNotifiedThatTheVerificationEmailHasBeenSent(): void
+    {
+        $this->notificationChecker->checkNotification(
+            'An email with the verification link has been sent to your email address.',
+            NotificationType::success()
+        );
+    }
+}
diff --git a/src/Sylius/Bundle/ShopBundle/EventListener/CustomerEmailUpdaterListener.php b/src/Sylius/Bundle/ShopBundle/EventListener/CustomerEmailUpdaterListener.php
new file mode 100644
index 00000000000..7a66602ac54
--- /dev/null
+++ b/src/Sylius/Bundle/ShopBundle/EventListener/CustomerEmailUpdaterListener.php
@@ -0,0 +1,106 @@
+tokenGenerator = $tokenGenerator;
+        $this->channelContext = $channelContext;
+        $this->eventDispatcher = $eventDispatcher;
+        $this->session = $session;
+    }
+
+    public function eraseVerification(GenericEvent $event): void
+    {
+        $customer = $event->getSubject();
+
+        /** @var CustomerInterface $customer */
+        Assert::isInstanceOf($customer, CustomerInterface::class);
+
+        /** @var ShopUserInterface $user */
+        $user = $customer->getUser();
+        if ($customer->getEmail() !== $user->getUsername()) {
+            $user->setEmail($customer->getEmail());
+            $user->setVerifiedAt(null);
+
+            $token = $this->tokenGenerator->generate();
+            $user->setEmailVerificationToken($token);
+
+            /** @var ChannelInterface $channel */
+            $channel = $this->channelContext->getChannel();
+
+            if ($channel->isAccountVerificationRequired()) {
+                $user->setEnabled(false);
+            }
+        }
+    }
+
+    public function sendVerificationEmail(GenericEvent $event): void
+    {
+        /** @var ChannelInterface $channel */
+        $channel = $this->channelContext->getChannel();
+
+        if (!$channel->isAccountVerificationRequired()) {
+            return;
+        }
+
+        $customer = $event->getSubject();
+
+        /** @var CustomerInterface $customer */
+        Assert::isInstanceOf($customer, CustomerInterface::class);
+
+        /** @var ShopUserInterface $user */
+        $user = $customer->getUser();
+
+        if (!$user->isEnabled() && !$user->isVerified() && null !== $user->getEmailVerificationToken()) {
+            $this->eventDispatcher->dispatch(UserEvents::REQUEST_VERIFICATION_TOKEN, new GenericEvent($user));
+            $this->addFlash('success', 'sylius.user.verify_email_request');
+        }
+    }
+
+    private function addFlash(string $type, string $message): void
+    {
+        /** @var FlashBagInterface $flashBag */
+        $flashBag = $this->session->getBag('flashes');
+        $flashBag->add($type, $message);
+    }
+}
diff --git a/src/Sylius/Bundle/ShopBundle/Resources/config/services.xml b/src/Sylius/Bundle/ShopBundle/Resources/config/services.xml
index d65bb7b08b9..9d781a3d743 100644
--- a/src/Sylius/Bundle/ShopBundle/Resources/config/services.xml
+++ b/src/Sylius/Bundle/ShopBundle/Resources/config/services.xml
@@ -29,6 +29,15 @@
             

 
+        
+            
+            
+            
+            
+            
+            
+        
+
         


