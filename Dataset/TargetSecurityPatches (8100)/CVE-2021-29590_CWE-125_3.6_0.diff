953f28dca13c92839ba389c055587cfe6c723578
tensorflow@@tensorflow
diff --git a/tensorflow/lite/kernels/maximum_minimum.cc b/tensorflow/lite/kernels/maximum_minimum.cc
index 777e51442f120..176e020a5a8e5 100644
--- a/tensorflow/lite/kernels/maximum_minimum.cc
+++ b/tensorflow/lite/kernels/maximum_minimum.cc
@@ -157,35 +157,37 @@ template 
 TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   OpContext op_context(context, node);
 
-    switch (op_context.output->type) {
-      case kTfLiteFloat32:
-        TFLiteOperation(context, node, op_context);
-        break;
-      case kTfLiteUInt8:
-        TFLiteOperation(context, node,
-                                                      op_context);
-        break;
-      case kTfLiteInt8:
-        TFLiteOperation(context, node, op_context);
-        break;
-      case kTfLiteInt32:
-        TFLiteOperation(context, node,
-                                                      op_context);
-        break;
-      case kTfLiteInt64:
-        TFLiteOperation(context, node,
-                                                      op_context);
-        break;
-      case kTfLiteInt16:
-        TFLiteOperation(context, node,
-                                                      op_context);
-        break;
-      default:
-        context->ReportError(context,
-                             "Type %d is currently not supported by Maximum.",
-                             op_context.output->type);
-        return kTfLiteError;
-    }
+  // If inputs have no element, shortcircuit.
+  if (NumElements(op_context.input1) == 0 ||
+      NumElements(op_context.input2) == 0) {
+    return kTfLiteOk;
+  }
+
+  switch (op_context.output->type) {
+    case kTfLiteFloat32:
+      TFLiteOperation(context, node, op_context);
+      break;
+    case kTfLiteUInt8:
+      TFLiteOperation(context, node, op_context);
+      break;
+    case kTfLiteInt8:
+      TFLiteOperation(context, node, op_context);
+      break;
+    case kTfLiteInt32:
+      TFLiteOperation(context, node, op_context);
+      break;
+    case kTfLiteInt64:
+      TFLiteOperation(context, node, op_context);
+      break;
+    case kTfLiteInt16:
+      TFLiteOperation(context, node, op_context);
+      break;
+    default:
+      context->ReportError(context,
+                           "Type %d is currently not supported by Maximum.",
+                           op_context.output->type);
+      return kTfLiteError;
+  }
   return kTfLiteOk;
 }
 
