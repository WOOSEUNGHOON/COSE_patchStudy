b152cc63019230c9973965a98e4386ea5322c18f
OpenClinica@@OpenClinica@@pull@@3490
diff --git a/core/src/main/java/org/akaza/openclinica/dao/extract/OdmExtractDAO.java b/core/src/main/java/org/akaza/openclinica/dao/extract/OdmExtractDAO.java
index f3619edaa5..24a6f8f3d1 100644
--- a/core/src/main/java/org/akaza/openclinica/dao/extract/OdmExtractDAO.java
+++ b/core/src/main/java/org/akaza/openclinica/dao/extract/OdmExtractDAO.java
@@ -622,7 +622,12 @@ public void getBasicDefinitions(String crfVersionOID, BasicDefinitionsBean basic
         ArrayList units = basicDef.getMeasurementUnits();
         String uprev = "";
         this.setStudyMeasurementUnitsTypesExpected();
-        ArrayList rows = this.select(this.getStudyMeasurementUnitsSql(crfVersionOID));
+        
+        //OC-17141
+        HashMap param = new HashMap();        
+        param.put(new Integer(1), crfVersionOID);
+        ArrayList rows = this.select(getStudyMeasurementUnitsSqlbyCrfVersionOid(),param);
+        
         Iterator it = rows.iterator();
         while (it.hasNext()) {
             HashMap row = (HashMap) it.next();
@@ -3536,6 +3541,12 @@ protected String getStudyMeasurementUnitsSql(String crfVersionOid) {
         		"where cv.oc_OID in (\'"+crfVersionOid +"\')   and cv.crf_version_id = vm.crf_version_id and vm.item_id = item.item_id " +
         		"and item.units = mu.name order by mu.oc_oid";
     }
+    
+    protected String getStudyMeasurementUnitsSqlbyCrfVersionOid() {
+        return "select distinct mu.oc_oid as mu_oid, mu.name from  crf_version cv, versioning_map vm, item, measurement_unit mu " +
+        		"where cv.oc_OID in (?)   and cv.crf_version_id = vm.crf_version_id and vm.item_id = item.item_id " +
+        		"and item.units = mu.name order by mu.oc_oid";
+    }
   
     protected String getEventGroupItemWithUnitSql(String studyIds, String sedIds, String itemIds, String dateConstraint, int datasetItemStatusId,
             String studySubjectIds) {
diff --git a/core/src/main/java/org/akaza/openclinica/dao/hibernate/EventCrfFlagDao.java b/core/src/main/java/org/akaza/openclinica/dao/hibernate/EventCrfFlagDao.java
index b2350444e4..c467802d71 100644
--- a/core/src/main/java/org/akaza/openclinica/dao/hibernate/EventCrfFlagDao.java
+++ b/core/src/main/java/org/akaza/openclinica/dao/hibernate/EventCrfFlagDao.java
@@ -18,8 +18,11 @@ Class domainClass() {
     }
 
     public EventCrfFlag findByEventCrfPath(int tagId, String path) {
-        String query = "from " + getDomainClassName() + " where path = '" + path + "' and tagId=" + tagId;
+        String query = "from " + getDomainClassName() + " where path = :path and tagId= :tagId";
         org.hibernate.Query q = getCurrentSession().createQuery(query);
+        q.setInteger("tagId", tagId);
+        q.setString("path", path);
+        
         return (EventCrfFlag) q.uniqueResult();
 
     }
diff --git a/core/src/main/java/org/akaza/openclinica/dao/hibernate/ItemDataFlagDao.java b/core/src/main/java/org/akaza/openclinica/dao/hibernate/ItemDataFlagDao.java
index 2704a06a41..faedbece36 100644
--- a/core/src/main/java/org/akaza/openclinica/dao/hibernate/ItemDataFlagDao.java
+++ b/core/src/main/java/org/akaza/openclinica/dao/hibernate/ItemDataFlagDao.java
@@ -18,20 +18,26 @@ Class domainClass() {
 
     
     public List findAllByEventCrfPath(int tag_id , String eventCrfPath ) {
-
+    	
         String query = " from " + getDomainClassName() + "  where "
-                + " tag_id= " + tag_id +  " and path LIKE '" + eventCrfPath +".%'"  ;
+                + " tag_id = :tag_id and path LIKE :eventCrfPath";
         
         org.hibernate.Query q = getCurrentSession().createQuery(query);
+        q.setInteger("tag_id", tag_id);
+        q.setString("eventCrfPath", eventCrfPath + ".%");
+        
         return (List) q.list();
     }
 
     public ItemDataFlag findByItemDataPath(int tag_id ,  String itemDataPath ) {
 
         String query = " from " + getDomainClassName() + "  where "
-                + " tag_id= " + tag_id  + " and path= '" + itemDataPath +"'"   ;
+                + " tag_id= :tag_id  and path= :itemDataPath ";
         
         org.hibernate.Query q = getCurrentSession().createQuery(query);
+        q.setInteger("tag_id", tag_id);
+        q.setString("itemDataPath", itemDataPath);
+        
         return (ItemDataFlag) q.uniqueResult();
     }
 
