f5a765381f051fe624386866ddb1f6b5e7eb929b
nilsteampassnet@@TeamPass
diff --git a/changelog.md b/changelog.md
index 45bf1a91f..4618f174c 100755
--- a/changelog.md
+++ b/changelog.md
@@ -9,8 +9,10 @@
  Fixed some other security failures (credit to ​security at Amossys)
  Improved security regarding uploading files
  Fixed issue while restoring DB from administration page
+ Fixed "PW copy to clipboard" log unconsistency in specific case
  Improved / Fixed administration task for encrypting/decrypting files
  Improved security regarding item history display
+ Improved the possibility to define the access level on Roles when creating new folder
  Added filter in Roles
  New: confirm deletion of attachment
  #1956 Warning appears on Category and API pages in admin mode
diff --git a/folders.load.php b/folders.load.php
index 4127be0df..1d5c28171 100644
--- a/folders.load.php
+++ b/folders.load.php
@@ -20,6 +20,7 @@
 
+
+
diff --git a/sources/folders.queries.php b/sources/folders.queries.php
index 32f61e021..e2ac66e7a 100644
--- a/sources/folders.queries.php
+++ b/sources/folders.queries.php
@@ -438,6 +438,19 @@
             $complexity = htmlspecialchars_decode($dataReceived['complexity']);
             $parentId = htmlspecialchars_decode($dataReceived['parent_id']);
             $renewalPeriod = htmlspecialchars_decode($dataReceived['renewal_period']);
+            if ($parentId === "0") {
+                if (isset($dataReceived['access_level']) === true) {
+                    $access_level_by_role = filter_var(htmlspecialchars_decode($dataReceived['access_level']), FILTER_SANITIZE_STRING);
+                } else {
+                    if ($_SESSION['user_manager'] === "1") {
+                        $access_level_by_role = "W";
+                    } else {
+                        $access_level_by_role = "";
+                    }
+                }
+            } else {
+                $access_level_by_role = "";
+            }
 
             //Check if title doesn't contains html codes
             if (preg_match_all("|<[^>]+>(.*)]+>|U", $title, $out)) {
@@ -544,46 +557,52 @@
                     $tree = new Tree\NestedTree\NestedTree(prefix_table("nested_tree"), 'id', 'parent_id', 'title');
                     $tree->rebuild();
 
-                    if ($isPersonal !== 1
-                        && isset($SETTINGS['subfolder_rights_as_parent'])
-                        && $SETTINGS['subfolder_rights_as_parent'] === 1
-                        || ($isPersonal !== 1 && $parentId === "0")
-                    ) {
+                    // Add right to see this folder
+                    if ($_SESSION['is_admin'] === "1" || $_SESSION['user_manager'] === "1") {
                         //Get user's rights
                         identifyUserRights(
-                            array_push($_SESSION['groupes_visibles'], $newId),
+                            $_SESSION['groupes_visibles'],
                             implode(";", $_SESSION['groupes_interdits']),
                             $_SESSION['is_admin'],
-                            $_SESSION['fonction_id']
+                            is_array($_SESSION['fonction_id']) === true ? implode(";", $_SESSION['fonction_id']) : $_SESSION['fonction_id']
                         );
+                    }
 
+                    if ($isPersonal !== 1
+                        && $parentId === "0"
+                    ) {
                         //add access to this new folder
                         foreach (explode(';', $_SESSION['fonction_id']) as $role) {
-                            if (!empty($role)) {
+                            if (empty($role) === false && empty($access_level_by_role) === false) {
                                 DB::insert(
                                     prefix_table("roles_values"),
                                     array(
                                         'role_id' => $role,
                                         'folder_id' => $newId,
-                                        'type' => "W"
+                                        'type' => $access_level_by_role
                                     )
                                 );
                             }
                         }
                     }
 
-                    //If it is a subfolder, then give access to it for all roles that allows the parent folder
-                    $rows = DB::query("SELECT role_id, type FROM ".prefix_table("roles_values")." WHERE folder_id = %i", $parentId);
-                    foreach ($rows as $record) {
-                        //add access to this subfolder
-                        DB::insert(
-                            prefix_table("roles_values"),
-                            array(
-                                'role_id' => $record['role_id'],
-                                'folder_id' => $newId,
-                                'type' => $record['type']
-                            )
-                        );
+
+                    if (isset($SETTINGS['subfolder_rights_as_parent']) === true
+                        && $SETTINGS['subfolder_rights_as_parent'] === "1"
+                    ) {
+                        //If it is a subfolder, then give access to it for all roles that allows the parent folder
+                        $rows = DB::query("SELECT role_id, type FROM ".prefix_table("roles_values")." WHERE folder_id = %i", $parentId);
+                        foreach ($rows as $record) {
+                            //add access to this subfolder
+                            DB::insert(
+                                prefix_table("roles_values"),
+                                array(
+                                    'role_id' => $record['role_id'],
+                                    'folder_id' => $newId,
+                                    'type' => $record['type']
+                                )
+                            );
+                        }
                     }
 
                     // if parent folder has Custom Fields Categories then add to this child one too
diff --git a/sources/items.queries.php b/sources/items.queries.php
index d10d13cb7..f29ef12b1 100644
--- a/sources/items.queries.php
+++ b/sources/items.queries.php
@@ -2695,7 +2695,7 @@
                                     $new_line .= ' ';
                                 }
                                 if (empty($pw) === false) {
-                                    $new_line .= ' ';
+                                    $new_line .= ' ';
                                 }
                             }
                         }
diff --git a/sources/main.functions.php b/sources/main.functions.php
index 28b90e44e..a86f2f552 100644
--- a/sources/main.functions.php
+++ b/sources/main.functions.php
@@ -510,6 +510,9 @@ function defuse_return_decrypted($value)
 function trimElement($chaine, $element)
 {
     if (!empty($chaine)) {
+        if (is_array($chaine) === true) {
+            $chaine = implode(";", $chaine);
+        }
         $chaine = trim($chaine);
         if (substr($chaine, 0, 1) == $element) {
             $chaine = substr($chaine, 1);
@@ -658,7 +661,7 @@ function identifyUserRights($groupesVisiblesUser, $groupesInterditsUser, $isAdmi
         $_SESSION['read_only_folders'] = array();
         $_SESSION['fonction_id'] = $idFonctions;
         $groupesInterdits = array();
-        if (!is_array($groupesInterditsUser)) {
+        if (is_array($groupesInterditsUser) === false) {
             $groupesInterditsUser = explode(';', trimElement($groupesInterditsUser, ";"));
         }
         if (!empty($groupesInterditsUser) && count($groupesInterditsUser) > 0) {
