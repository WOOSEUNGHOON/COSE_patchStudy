0fec095d534126931c99fd38e9c6d41f5c685c1a
x-stream@@xstream
diff --git a/xstream-distribution/src/content/changes.html b/xstream-distribution/src/content/changes.html
index 27df5995b..7002e972b 100644
--- a/xstream-distribution/src/content/changes.html
+++ b/xstream-distribution/src/content/changes.html
@@ -28,6 +28,14 @@
 		filter for the appropriate milestone.
 	
 
+	Upcoming 1.4.x maintenance release
+
+	Not yet released.
+
+	This maintenance release addresses the security vulnerability CVE-2017-9805 reported
+	originally for Struts' XStream Plugin, an arbitrary execution of commands when unmarshalling for XStream instances
+	with uninitialized security framework.
+
 	1.4.13
Released September 6, 2020.
diff --git a/xstream/src/java/com/thoughtworks/xstream/XStream.java b/xstream/src/java/com/thoughtworks/xstream/XStream.java
index 939010265..b880952a9 100644
--- a/xstream/src/java/com/thoughtworks/xstream/XStream.java
+++ b/xstream/src/java/com/thoughtworks/xstream/XStream.java
@@ -642,7 +642,7 @@ protected void setupSecurity() {
         }
 
         addPermission(AnyTypePermission.ANY);
-        denyTypes(new String[]{"java.beans.EventHandler"});
+        denyTypes(new String[]{"java.beans.EventHandler", "javax.imageio.ImageIO$ContainsFilter"});
         denyTypesByRegExp(new Pattern[]{LAZY_ITERATORS, JAVAX_CRYPTO});
         allowTypeHierarchy(Exception.class);
         securityInitialized = false;
diff --git a/xstream/src/test/com/thoughtworks/acceptance/SecurityVulnerabilityTest.java b/xstream/src/test/com/thoughtworks/acceptance/SecurityVulnerabilityTest.java
index 183792761..848db0261 100644
--- a/xstream/src/test/com/thoughtworks/acceptance/SecurityVulnerabilityTest.java
+++ b/xstream/src/test/com/thoughtworks/acceptance/SecurityVulnerabilityTest.java
@@ -11,14 +11,14 @@
 package com.thoughtworks.acceptance;
 
 import java.beans.EventHandler;
+import java.util.Iterator;
 
 import com.thoughtworks.xstream.XStream;
 import com.thoughtworks.xstream.XStreamException;
 import com.thoughtworks.xstream.converters.ConversionException;
-import com.thoughtworks.xstream.converters.reflection.ReflectionConverter;
+import com.thoughtworks.xstream.core.JVM;
 import com.thoughtworks.xstream.security.AnyTypePermission;
 import com.thoughtworks.xstream.security.ForbiddenClassException;
-import com.thoughtworks.xstream.security.NoTypePermission;
 
 
 /**
@@ -39,15 +39,15 @@ protected void setupSecurity(XStream xstream) {
 
     public void testCannotInjectEventHandler() {
         final String xml = ""
-                + "\n"
-                + "  \n"
-                + "    java.lang.Runnable\n"
-                + "    \n"
-                + "      \n"
-                + "      exec\n"
-                + "    \n"
-                + "  \n"
-                + "";
+            + "\n"
+            + "  \n"
+            + "    java.lang.Runnable\n"
+            + "    \n"
+            + "      \n"
+            + "      exec\n"
+            + "    \n"
+            + "  \n"
+            + "";
 
         try {
             xstream.fromXML(xml);
@@ -75,26 +75,24 @@ public void testCannotInjectEventHandlerWithUnconfiguredSecurityFramework() {
             xstream.fromXML(xml);
             fail("Thrown " + XStreamException.class.getName() + " expected");
         } catch (final XStreamException e) {
-            assertTrue(e.getMessage().indexOf(EventHandler.class.getName())>=0);
+            assertTrue(e.getMessage().indexOf(EventHandler.class.getName()) >= 0);
         }
         assertEquals(0, BUFFER.length());
     }
 
     public void testExplicitlyConvertEventHandler() {
         final String xml = ""
-                + "\n"
-                + "  \n"
-                + "    java.lang.Runnable\n"
-                + "    \n"
-                + "      \n"
-                + "      exec\n"
-                + "    \n"
-                + "  \n"
-                + "";
+            + "\n"
+            + "  \n"
+            + "    java.lang.Runnable\n"
+            + "    \n"
+            + "      \n"
+            + "      exec\n"
+            + "    \n"
+            + "  \n"
+            + "";
 
         xstream.allowTypes(new Class[]{EventHandler.class});
-        xstream.registerConverter(new ReflectionConverter(xstream.getMapper(), xstream
-            .getReflectionProvider(), EventHandler.class));
 
         final Runnable[] array = (Runnable[])xstream.fromXML(xml);
         assertEquals(0, BUFFER.length());
@@ -102,6 +100,71 @@ public void testExplicitlyConvertEventHandler() {
         assertEquals("Executed!", BUFFER.toString());
     }
 
+    public void testCannotInjectConvertImageIOContainsFilterWithUnconfiguredSecurityFramework() {
+        if (JVM.isVersion(7)) {
+            final String xml = ""
+                + "\n"
+                + " \n"
+                + "   0\n"
+                + "   1\n"
+                + "   1\n"
+                + "   \n"
+                + "     \n"
+                + "   \n"
+                + " \n"
+                + " \n"
+                + "   \n"
+                + "     com.thoughtworks.acceptance.SecurityVulnerabilityTest$Exec\n"
+                + "     exec\n"
+                + "     \n"
+                + "   \n"
+                + "   exec\n"
+                + " \n"
+                + " \n"
+                + "";
+
+            try {
+                xstream.fromXML(xml);
+                fail("Thrown " + XStreamException.class.getName() + " expected");
+            } catch (final XStreamException e) {
+                assertTrue(e.getMessage().indexOf("javax.imageio.ImageIO$ContainsFilter") >= 0);
+            }
+            assertEquals(0, BUFFER.length());
+        }
+    }
+
+    public void testExplicitlyConvertImageIOContainsFilter() {
+        if (JVM.isVersion(7)) {
+            final String xml = ""
+                + "\n"
+                + " \n"
+                + "   0\n"
+                + "   1\n"
+                + "   1\n"
+                + "   \n"
+                + "     \n"
+                + "   \n"
+                + " \n"
+                + " \n"
+                + "   \n"
+                + "     com.thoughtworks.acceptance.SecurityVulnerabilityTest$Exec\n"
+                + "     exec\n"
+                + "     \n"
+                + "   \n"
+                + "   exec\n"
+                + " \n"
+                + " \n"
+                + "";
+
+            xstream.allowTypes(new String[]{"javax.imageio.ImageIO$ContainsFilter"});
+
+            final Iterator iterator = (Iterator)xstream.fromXML(xml);
+            assertEquals(0, BUFFER.length());
+            iterator.next();
+            assertEquals("Executed!", BUFFER.toString());
+        }
+    }
+
     public static class Exec {
 
         public void exec() {
@@ -120,7 +183,7 @@ public void testInstanceOfVoid() {
 
     public void testDeniedInstanceOfVoid() {
         xstream.addPermission(AnyTypePermission.ANY); // clear out defaults
-        xstream.denyTypes(new Class[] { void.class, Void.class });
+        xstream.denyTypes(new Class[]{void.class, Void.class});
         try {
             xstream.fromXML("");
             fail("Thrown " + ForbiddenClassException.class.getName() + " expected");
@@ -130,7 +193,7 @@ public void testDeniedInstanceOfVoid() {
     }
 
     public void testAllowedInstanceOfVoid() {
-        xstream.allowTypes(new Class[] { void.class, Void.class });
+        xstream.allowTypes(new Class[]{void.class, Void.class});
         try {
             xstream.fromXML("");
             fail("Thrown " + ConversionException.class.getName() + " expected");
@@ -138,9 +201,8 @@ public void testAllowedInstanceOfVoid() {
             assertEquals("void", e.get("construction-type"));
         }
     }
-    
-    public static class LazyIterator {
-    }
+
+    public static class LazyIterator {}
 
     public void testInstanceOfLazyIterator() {
         xstream.alias("lazy-iterator", LazyIterator.class);
