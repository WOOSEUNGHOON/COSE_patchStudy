0f72a8c31df9f3d8f609a7c58ca91139051d44eb
mozilla-b2g@@gaia
diff --git a/apps/sharedtest/test/unit/tagged_test.js b/apps/sharedtest/test/unit/tagged_test.js
new file mode 100644
index 000000000000..d48876852f8d
--- /dev/null
+++ b/apps/sharedtest/test/unit/tagged_test.js
@@ -0,0 +1,18 @@
+/* global Tagged */
+
+'use strict';
+
+require('/shared/js/tagged.js');
+
+suite('tagged template helper', function() {
+
+  test('#escapeHTML', function() {
+    var myVal = 'hello';
+    // fix a jshint issue with tagged template strings
+    // https://github.com/jshint/jshint/issues/2000
+    /* jshint -W033 */
+    var generated = Tagged.escapeHTML `${myVal} world`;
+    /* jshint +W033 */
+    assert.equal(generated, '<b>hello</b> world');
+  });
+});
diff --git a/apps/system/index.html b/apps/system/index.html
index 73d0a638a2ff..810147ab39c4 100644
--- a/apps/system/index.html
+++ b/apps/system/index.html
@@ -33,6 +33,7 @@
     


+    



diff --git a/apps/system/js/card.js b/apps/system/js/card.js
index 233b9c6ca950..b915cf3675fa 100644
--- a/apps/system/js/card.js
+++ b/apps/system/js/card.js
@@ -1,4 +1,4 @@
-/* globals BaseUI, CardsHelper, TrustedUIManager */
+/* globals BaseUI, CardsHelper, Tagged, TrustedUIManager */
 
 /* exported Card */
 
@@ -69,38 +69,40 @@
    * Template string representing the innerHTML of the instance's element
    * @memberOf Card.prototype
    */
-  Card.prototype._template =
-    '' +
-    ' {title}' +
-    ' {subTitle}' +
-    '' +
-    '' +
-    '' +
-    '' +
-    '' +
-    ''+
-    ' ' +
-    ' ' +
-    '   ' +
-    '  ' +
-    ' ' +
-    '';
+  Card.prototype.template = function() {
+    // fix a jshint issue with tagged template strings
+    // https://github.com/jshint/jshint/issues/2000
+    /* jshint -W033 */
+    return Tagged.escapeHTML `
+     ${this.title}
+     ${this.subTitle}
+    
+
+    
+    
+
+    
+     
+     
+       
+      
+     
+    `;
+    /* jshint +W033 */
+  };
 
   /**
    * Card html view - builds the innerHTML for a card element
    * @memberOf Card.prototype
    */
   Card.prototype.view = function c_view() {
-    var viewData = this;
-    return this._template.replace(/\{([^\}]+)\}/g, function(m, key) {
-        return viewData[key];
-    });
+    return this.template();
   };
 
   /**
diff --git a/apps/system/test/unit/card_test.js b/apps/system/test/unit/card_test.js
index 2e95c0a20755..32b010b21ce9 100644
--- a/apps/system/test/unit/card_test.js
+++ b/apps/system/test/unit/card_test.js
@@ -1,6 +1,7 @@
 /* global AppWindow, Card, MocksHelper, CardsHelper */
 'use strict';
 
+require('/shared/js/tagged.js');
 requireApp('system/test/unit/mock_app_window.js');
 requireApp('system/test/unit/mock_trusted_ui_manager.js');
 
diff --git a/apps/system/test/unit/task_manager_test.js b/apps/system/test/unit/task_manager_test.js
index 005eafbb0396..89dc826023db 100644
--- a/apps/system/test/unit/task_manager_test.js
+++ b/apps/system/test/unit/task_manager_test.js
@@ -11,6 +11,7 @@ requireApp('system/test/unit/mock_stack_manager.js');
 requireApp('system/test/unit/mock_app_window.js');
 requireApp('system/test/unit/mock_trusted_ui_manager.js');
 
+require('/shared/js/tagged.js');
 require('/shared/test/unit/mocks/mock_service.js');
 require('/shared/test/unit/mocks/mock_navigator_moz_settings.js');
 require('/shared/test/unit/mocks/mock_l10n.js');
diff --git a/shared/js/tagged.js b/shared/js/tagged.js
new file mode 100644
index 000000000000..794614813170
--- /dev/null
+++ b/shared/js/tagged.js
@@ -0,0 +1,38 @@
+'use strict';
+
+/**
+ * tagged.js is a simple library to help you manage tagged template strings.
+ */
+var Tagged = {
+
+  _entity: /[&<>"'/]/g,
+
+  _entities: {
+    '&': '&',
+    '<': '<',
+    '>': '>',
+    '"': '"',
+    '\'': ''',
+    '/': '/'
+  },
+
+  getEntity: function(s) {
+    return Tagged._entities[s];
+  },
+
+  /**
+   * Escapes HTML for all values in a tagged template string.
+   */
+  escapeHTML: function(strings, ...values) {
+    var result = '';
+
+    for (var i = 0; i < strings.length; i++) {
+      result += strings[i];
+      if (i < values.length) {
+        result += String(values[i]).replace(Tagged._entity, Tagged.getEntity);
+      }
+    }
+
+    return result;
+  }
+};
