87fa7dac5d899b3960ab48e151881da4793cfcc3
gocd@@gocd-ldap-authentication-plugin
diff --git a/src/main/java/cd/go/apacheds/ApacheDsLdapClient.java b/src/main/java/cd/go/apacheds/ApacheDsLdapClient.java
index eaeb55f..156425c 100644
--- a/src/main/java/cd/go/apacheds/ApacheDsLdapClient.java
+++ b/src/main/java/cd/go/apacheds/ApacheDsLdapClient.java
@@ -25,6 +25,7 @@
 import org.apache.directory.api.ldap.extras.controls.ppolicy_impl.PasswordPolicyDecorator;
 import org.apache.directory.api.ldap.model.entry.Entry;
 import org.apache.directory.api.ldap.model.exception.LdapException;
+import org.apache.directory.api.ldap.model.filter.FilterEncoder;
 import org.apache.directory.api.ldap.model.message.*;
 import org.apache.directory.api.ldap.model.name.Dn;
 import org.apache.directory.ldap.client.api.LdapConnectionConfig;
@@ -95,7 +96,7 @@ private PasswordWarning performBind(Dn userDn, String password) throws PasswordE
     }
 
     @Override
-    public  List search(final String filter, final Object[] filterArgs, final Mapper mapper, final int maxResultCount) {
+    public  List search(final String filter, final String[] filterArgs, final Mapper mapper, final int maxResultCount) {
         final List searchResults = new ArrayList<>();
         for (String searchBase : ldapConfiguration.getSearchBases()) {
             int resultsToFetch = resultsToFetch(maxResultCount, searchResults.size());
@@ -109,7 +110,7 @@ public  List search(final String filter, final Object[] filterArgs, final
                         .setScope(SearchScope.SUBTREE)
                         .addAttributes("*")
                         .setSizeLimit(resultsToFetch)
-                        .setFilter(format(filter, filterArgs))
+                        .setFilter(FilterEncoder.format(filter, filterArgs))
                         .setTimeLimit(ldapConfiguration.getSearchTimeout())
                         .setBase(new Dn(searchBase));
 
@@ -124,11 +125,11 @@ public  List search(final String filter, final Object[] filterArgs, final
 
     @Override
     public void validate() {
-        final String filter = format(ldapConfiguration.getUserSearchFilter(), "test");
+        final String filter = FilterEncoder.format(ldapConfiguration.getUserSearchFilter(), "test");
         ldapConnectionTemplate.searchFirst(ldapConfiguration.getSearchBases().get(0), filter, SearchScope.SUBTREE, entry -> entry);
     }
 
-    public List search(final String filter, final Object[] filterArgs, final int maxResultCount) {
+    public List search(final String filter, final String[] filterArgs, final int maxResultCount) {
         return search(filter, filterArgs, resultWrapper -> (Entry) resultWrapper.getResult(), maxResultCount);
     }
 
diff --git a/src/main/java/cd/go/authentication/ldap/LdapClient.java b/src/main/java/cd/go/authentication/ldap/LdapClient.java
index 5dc2af4..3f05644 100644
--- a/src/main/java/cd/go/authentication/ldap/LdapClient.java
+++ b/src/main/java/cd/go/authentication/ldap/LdapClient.java
@@ -24,7 +24,7 @@
 public interface LdapClient {
      T authenticate(String username, String password, Mapper mapper);
 
-     List search(String userSearchFilter, Object[] filterArgs, Mapper mapper, int maxResult);
+     List search(String userSearchFilter, String[] filterArgs, Mapper mapper, int maxResult);
 
     void validate() throws NamingException;
 }
diff --git a/src/main/java/cd/go/framework/ldap/JNDILdapClient.java b/src/main/java/cd/go/framework/ldap/JNDILdapClient.java
index bf9196f..23363fc 100644
--- a/src/main/java/cd/go/framework/ldap/JNDILdapClient.java
+++ b/src/main/java/cd/go/framework/ldap/JNDILdapClient.java
@@ -71,7 +71,7 @@ public  T authenticate(String username, String password, Mapper mapper) {
         }
     }
 
-    public  List search(String filter, Object[] filterArgs, Mapper mapper, int maxResult) {
+    public  List search(String filter, String[] filterArgs, Mapper mapper, int maxResult) {
         List results = new ArrayList<>();
         DirContext dirContext = getDirContext(ldapConfiguration, ldapConfiguration.getManagerDn(), ldapConfiguration.getPassword());
 
diff --git a/src/test/java/cd/go/apacheds/LdapTest.java b/src/test/java/cd/go/apacheds/ApacheDsLdapClientTest.java
similarity index 88%
rename from src/test/java/cd/go/apacheds/LdapTest.java
rename to src/test/java/cd/go/apacheds/ApacheDsLdapClientTest.java
index 8851964..c35c919 100644
--- a/src/test/java/cd/go/apacheds/LdapTest.java
+++ b/src/test/java/cd/go/apacheds/ApacheDsLdapClientTest.java
@@ -38,7 +38,7 @@
 import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.*;
 
-class LdapTest {
+class ApacheDsLdapClientTest {
 
     @Test
     void shouldBeAbleToSearchUsers() throws ParseException {
@@ -65,6 +65,26 @@ void shouldBeAbleToSearchUsers() throws ParseException {
         assertThat(searchRequest.getTimeLimit()).isEqualTo(10);
     }
 
+    @Test
+    void shouldEscapeSearchFilterValues() throws ParseException {
+        final LdapConfiguration ldapConfiguration = new LdapConfigurationBuilder()
+                .withSearchTimeout(10)
+                .withSearchBases("ou=foo,dc=bar")
+                .build();
+
+        final LdapConnectionTemplate ldapConnectionTemplate = mock(LdapConnectionTemplate.class);
+        final ApacheDsLdapClient ldap = new ApacheDsLdapClient(ldapConfiguration, ldapConnectionTemplate);
+        final ArgumentCaptor argumentCaptor = ArgumentCaptor.forClass(SearchRequestImpl.class);
+
+        when(ldapConnectionTemplate.search(argumentCaptor.capture(), ArgumentMatchers.>any())).thenReturn(Collections.singletonList(new DefaultEntry()));
+
+        String injectionUserName = "*)(objectclass=*";
+        ldap.search("(uid={0})", new String[]{injectionUserName}, 1);
+
+        assertThat(argumentCaptor.getValue().getFilter())
+                .isEqualTo(FilterParser.parse("(uid=\\2A\\29\\28objectclass=\\2A)"));
+    }
+
     @Test
     void shouldAbleToFetchResultsFromMultipleSearchBase() {
         final LdapConfiguration ldapConfiguration = new LdapConfigurationBuilder()
