329e4d7e028dd8081496cf8bd3acc822000b0ec0
shopware@@core
diff --git a/Framework/Api/Controller/SalesChannelProxyController.php b/Framework/Api/Controller/SalesChannelProxyController.php
index f47b815ad..0285cdc59 100644
--- a/Framework/Api/Controller/SalesChannelProxyController.php
+++ b/Framework/Api/Controller/SalesChannelProxyController.php
@@ -20,6 +20,7 @@
 use Shopware\Core\Framework\DataAbstractionLayer\Search\Criteria;
 use Shopware\Core\Framework\DataAbstractionLayer\Search\Filter\EqualsFilter;
 use Shopware\Core\Framework\DataAbstractionLayer\Validation\EntityExists;
+use Shopware\Core\Framework\Routing\Annotation\Acl;
 use Shopware\Core\Framework\Routing\Annotation\RouteScope;
 use Shopware\Core\Framework\Routing\Annotation\Since;
 use Shopware\Core\Framework\Routing\Exception\MissingRequestParameterException;
@@ -167,6 +168,7 @@ public function proxyCreateOrder(string $salesChannelId, Request $request, Conte
     /**
      * @Since("6.2.0.0")
      * @Route("/api/_proxy/switch-customer", name="api.proxy.switch-customer", methods={"PATCH"})
+     * @Acl({"api_proxy_switch-customer"})
      *
      * @throws InconsistentCriteriaIdsException
      * @throws InvalidSalesChannelIdException
diff --git a/Framework/Test/Api/Controller/SalesChannelProxyControllerTest.php b/Framework/Test/Api/Controller/SalesChannelProxyControllerTest.php
index fc5df2e89..35e46b39b 100644
--- a/Framework/Test/Api/Controller/SalesChannelProxyControllerTest.php
+++ b/Framework/Test/Api/Controller/SalesChannelProxyControllerTest.php
@@ -1062,6 +1062,7 @@ public function testProxyCreateOrderPrivileges(): void
             static::assertSame('credit', $cart['lineItems'][1]['type']);
 
             $orderPrivileges = [
+                'api_proxy_switch-customer',
                 'order:create',
                 'order_customer:create',
                 'order_address:create',
@@ -1075,7 +1076,7 @@ public function testProxyCreateOrderPrivileges(): void
             foreach ([true, false] as $testOrderOnly) {
                 TestUser::createNewTestUser(
                     $browser->getContainer()->get(Connection::class),
-                    $testOrderOnly ? $orderPrivileges : [CreditOrderLineItemListener::ACL_ORDER_CREATE_DISCOUNT_PRIVILEGE],
+                    $testOrderOnly ? $orderPrivileges : ['api_proxy_switch-customer', CreditOrderLineItemListener::ACL_ORDER_CREATE_DISCOUNT_PRIVILEGE],
                 )->authorizeBrowser($browser);
                 $browser->request('POST', $this->getCreateOrderApiUrl($salesChannelContext->getSalesChannel()->getId()));
 
diff --git a/Migration/Migration1646397836UpdateRolePrivilegesOfOrderCreatorUpdateRolePrivilegesOfOrderCreator.php b/Migration/Migration1646397836UpdateRolePrivilegesOfOrderCreatorUpdateRolePrivilegesOfOrderCreator.php
new file mode 100644
index 000000000..5f86ed45a
--- /dev/null
+++ b/Migration/Migration1646397836UpdateRolePrivilegesOfOrderCreatorUpdateRolePrivilegesOfOrderCreator.php
@@ -0,0 +1,10 @@
+getContainer()->get('acl_role.repository');
+        $connection = $this->getContainer()->get(Connection::class);
+
+        $id = Uuid::randomHex();
+        $context = Context::createDefaultContext();
+        $repo->create([[
+            'id' => $id,
+            'name' => 'test',
+            'privileges' => ['order.creator'],
+        ]], $context);
+
+        $migration = new Migration1646397836UpdateRolePrivilegesOfOrderCreator();
+        $migration->update($connection);
+
+        /** @var AclRoleEntity $role */
+        $role = $repo->search(new Criteria([$id]), $context)->first();
+        static::assertNotNull($role);
+
+        static::assertContains('api_proxy_switch-customer', $role->getPrivileges());
+    }
+
+    public function testUnrelatedRolesAreNotUpdated(): void
+    {
+        $repo = $this->getContainer()->get('acl_role.repository');
+        $connection = $this->getContainer()->get(Connection::class);
+
+        $id = Uuid::randomHex();
+        $context = Context::createDefaultContext();
+        $privileges = ['order:create', 'order:read', 'order:update', 'order:delete'];
+        $repo->create([[
+            'id' => $id,
+            'name' => 'test',
+            'privileges' => $privileges,
+        ]], $context);
+
+        $before = $connection->fetchAssociative('SELECT * FROM `acl_role` WHERE id = :id', ['id' => Uuid::fromHexToBytes($id)]);
+
+        $migration = new Migration1646397836UpdateRolePrivilegesOfOrderCreator();
+        $migration->update($connection);
+
+        $after = $connection->fetchAssociative('SELECT * FROM `acl_role` WHERE id = :id', ['id' => Uuid::fromHexToBytes($id)]);
+
+        static::assertSame($before, $after);
+    }
+}
diff --git a/Migration/V6_4/Migration1646397836UpdateRolePrivilegesOfOrderCreator.php b/Migration/V6_4/Migration1646397836UpdateRolePrivilegesOfOrderCreator.php
new file mode 100644
index 000000000..22151619b
--- /dev/null
+++ b/Migration/V6_4/Migration1646397836UpdateRolePrivilegesOfOrderCreator.php
@@ -0,0 +1,56 @@
+ [
+            'api_proxy_switch-customer',
+        ],
+    ];
+
+    public function getCreationTimestamp(): int
+    {
+        return 1646397836;
+    }
+
+    public function update(Connection $connection): void
+    {
+        $roles = $connection->fetchAllAssociative('SELECT * from `acl_role`');
+
+        foreach ($roles as $role) {
+            $currentPrivileges = \json_decode($role['privileges'], true, 512, \JSON_THROW_ON_ERROR);
+            $newPrivileges = array_values($this->fixRolePrivileges($currentPrivileges));
+
+            if ($currentPrivileges === $newPrivileges) {
+                continue;
+            }
+
+            $role['privileges'] = json_encode($newPrivileges);
+            $role['updated_at'] = (new \DateTimeImmutable())->format(Defaults::STORAGE_DATE_FORMAT);
+
+            $connection->update('acl_role', $role, ['id' => $role['id']]);
+        }
+    }
+
+    public function updateDestructive(Connection $connection): void
+    {
+        // implement update destructive
+    }
+
+    private function fixRolePrivileges(array $rolePrivileges): array
+    {
+        foreach (self::NEW_PRIVILEGES as $key => $new) {
+            if (\in_array($key, $rolePrivileges, true)) {
+                $rolePrivileges = array_merge($rolePrivileges, $new);
+            }
+        }
+
+        return array_unique($rolePrivileges);
+    }
+}
