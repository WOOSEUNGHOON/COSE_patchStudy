1746dfb11fc0048366f34669e74318b8278a684c
facebook@@hhvm
diff --git a/hphp/hack/hhi/builtins_fb.hhi b/hphp/hack/hhi/builtins_fb.hhi
index a5ac7dd69c2..35236b8ad3b 100644
--- a/hphp/hack/hhi/builtins_fb.hhi
+++ b/hphp/hack/hhi/builtins_fb.hhi
@@ -5,6 +5,7 @@ const FB_UNSERIALIZE_NONSTRING_VALUE = 0;
 const FB_UNSERIALIZE_UNEXPECTED_END = 0;
 const FB_UNSERIALIZE_UNRECOGNIZED_OBJECT_TYPE = 0;
 const FB_UNSERIALIZE_UNEXPECTED_ARRAY_KEY_TYPE = 0;
+const FB_UNSERIALIZE_MAX_DEPTH_EXCEEDED = 0;
 
 const FB_SERIALIZE_HACK_ARRAYS = 0;
 const FB_SERIALIZE_HACK_ARRAYS_AND_KEYSETS = 0;
diff --git a/hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h b/hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h
index 3f56c3ea8f5..5a059a9ea6d 100644
--- a/hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h
+++ b/hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h
@@ -406,7 +406,7 @@ inline typename V::VariantType FBUnserializer::unserialize(
   folly::StringPiece serialized) {
 
   FBUnserializer unserializer(serialized);
-  return unserializer.unserializeThing();
+  return unserializer.unserializeThing(0);
 }
 
 template 
@@ -524,7 +524,7 @@ inline FBSerializeBase::Code FBUnserializer::nextCode() const {
 }
 
 template 
-inline typename V::MapType FBUnserializer::unserializeMap() {
+inline typename V::MapType FBUnserializer::unserializeMap(size_t depth) {
   p_ += CODE_SIZE;
 
   typename V::MapType ret = V::createMap();
@@ -536,14 +536,14 @@ inline typename V::MapType FBUnserializer::unserializeMap() {
       case FB_SERIALIZE_STRING:
         {
           auto key = unserializeString();
-          auto value = unserializeThing();
+          auto value = unserializeThing(depth + 1);
           V::mapSet(ret, std::move(key), std::move(value));
         }
         break;
       default:
         {
           auto key = unserializeInt64();
-          auto value = unserializeThing();
+          auto value = unserializeThing(depth + 1);
           V::mapSet(ret, std::move(key), std::move(value));
         }
     }
@@ -556,14 +556,15 @@ inline typename V::MapType FBUnserializer::unserializeMap() {
 }
 
 template 
-inline typename V::VectorType FBUnserializer::unserializeVector() {
+inline typename V::VectorType
+FBUnserializer::unserializeVector(size_t depth) {
   p_ += CODE_SIZE;
 
   typename V::VectorType ret = V::createVector();
 
   size_t code = nextCode();
   while (code != FB_SERIALIZE_STOP) {
-    V::vectorAppend(ret, unserializeThing());
+    V::vectorAppend(ret, unserializeThing(depth + 1));
     code = nextCode();
   }
   p_ += CODE_SIZE;
@@ -571,7 +572,7 @@ inline typename V::VectorType FBUnserializer::unserializeVector() {
 }
 
 template 
-inline typename V::VectorType FBUnserializer::unserializeList() {
+inline typename V::VectorType FBUnserializer::unserializeList(size_t depth) {
   p_ += CODE_SIZE;
 
   // the list size is written so we can reserve it in the vector
@@ -582,7 +583,7 @@ inline typename V::VectorType FBUnserializer::unserializeList() {
 
   size_t code = nextCode();
   while (code != FB_SERIALIZE_STOP) {
-    V::vectorAppend(ret, unserializeThing());
+    V::vectorAppend(ret, unserializeThing(depth + 1));
     code = nextCode();
   }
   p_ += CODE_SIZE;
@@ -590,7 +591,7 @@ inline typename V::VectorType FBUnserializer::unserializeList() {
 }
 
 template 
-inline typename V::SetType FBUnserializer::unserializeSet() {
+inline typename V::SetType FBUnserializer::unserializeSet(size_t depth) {
   p_ += CODE_SIZE;
 
   // the set size is written so we can reserve it in the set
@@ -601,7 +602,7 @@ inline typename V::SetType FBUnserializer::unserializeSet() {
 
   size_t code = nextCode();
   while (code != FB_SERIALIZE_STOP) {
-    V::setAppend(ret, unserializeThing());
+    V::setAppend(ret, unserializeThing(depth + 1));
     code = nextCode();
   }
   p_ += CODE_SIZE;
@@ -664,7 +665,12 @@ inline folly::StringPiece FBUnserializer::getSerializedMap() {
 }
 
 template 
-inline typename V::VariantType FBUnserializer::unserializeThing() {
+inline typename V::VariantType
+FBUnserializer::unserializeThing(size_t depth) {
+  if (UNLIKELY(depth > 1024)) {
+    throw UnserializeError("depth > 1024");
+  }
+
   size_t code = nextCode();
 
   switch (code) {
@@ -677,7 +683,7 @@ inline typename V::VariantType FBUnserializer::unserializeThing() {
     case FB_SERIALIZE_STRING:
       return V::fromString(unserializeString());
     case FB_SERIALIZE_STRUCT:
-      return V::fromMap(unserializeMap());
+      return V::fromMap(unserializeMap(depth));
     case FB_SERIALIZE_NULL:
       ++p_;
       return V::createNull();
@@ -686,11 +692,11 @@ inline typename V::VariantType FBUnserializer::unserializeThing() {
     case FB_SERIALIZE_BOOLEAN:
       return V::fromBool(unserializeBoolean());
     case FB_SERIALIZE_VECTOR:
-      return V::fromVector(unserializeVector());
+      return V::fromVector(unserializeVector(depth));
     case FB_SERIALIZE_LIST:
-      return V::fromVector(unserializeList());
+      return V::fromVector(unserializeList(depth));
     case FB_SERIALIZE_SET:
-      return V::fromSet(unserializeSet());
+      return V::fromSet(unserializeSet(depth));
     default:
       throw UnserializeError("Invalid code: " + folly::to(code)
                              + " at location " + folly::to(p_));
diff --git a/hphp/runtime/ext/fb/FBSerialize/FBSerialize.h b/hphp/runtime/ext/fb/FBSerialize/FBSerialize.h
index d3981b547c5..e04b1eb0513 100644
--- a/hphp/runtime/ext/fb/FBSerialize/FBSerialize.h
+++ b/hphp/runtime/ext/fb/FBSerialize/FBSerialize.h
@@ -165,14 +165,14 @@ struct FBUnserializer : private FBSerializeBase {
   double unserializeDouble();
   typename V::StringType unserializeString();
   folly::StringPiece unserializeStringPiece();
-  typename V::MapType unserializeMap();
-  typename V::VectorType unserializeVector();
-  typename V::VectorType unserializeList();
-  typename V::SetType unserializeSet();
+  typename V::MapType unserializeMap(size_t depth);
+  typename V::VectorType unserializeVector(size_t depth);
+  typename V::VectorType unserializeList(size_t depth);
+  typename V::SetType unserializeSet(size_t depth);
   // read the next map but don't unserialze it (for lazy or delay
   // unserialization)
   folly::StringPiece getSerializedMap();
-  typename V::VariantType unserializeThing();
+  typename V::VariantType unserializeThing(size_t depth);
 
   void advance(size_t delta);
   Code nextCode() const;
diff --git a/hphp/runtime/ext/fb/VariantController.h b/hphp/runtime/ext/fb/VariantController.h
index 9275fa055bb..40fdad785a8 100644
--- a/hphp/runtime/ext/fb/VariantController.h
+++ b/hphp/runtime/ext/fb/VariantController.h
@@ -283,12 +283,10 @@ struct VariantControllerImpl {
     return set.size();
   }
   static void setAppend(SetType& set, const VariantType& v) {
-    auto value_type = type(v);
-    if (value_type != HPHP::serialize::Type::INT64 &&
-        value_type != HPHP::serialize::Type::STRING) {
+    if (!v.isInteger() && !v.isString()) {
       throw HPHP::serialize::UnserializeError(
-          "Unsupported keyset element of type " +
-          folly::to(value_type));
+        "Keysets can only contain integers or strings"
+      );
     }
     set.append(v);
   }
diff --git a/hphp/runtime/ext/fb/ext_fb.cpp b/hphp/runtime/ext/fb/ext_fb.cpp
index 5efea941513..a364a09e848 100644
--- a/hphp/runtime/ext/fb/ext_fb.cpp
+++ b/hphp/runtime/ext/fb/ext_fb.cpp
@@ -66,6 +66,7 @@ static const UChar32 SUBSTITUTION_CHARACTER = 0xFFFD;
 #define FB_UNSERIALIZE_UNEXPECTED_END            0x0002
 #define FB_UNSERIALIZE_UNRECOGNIZED_OBJECT_TYPE  0x0003
 #define FB_UNSERIALIZE_UNEXPECTED_ARRAY_KEY_TYPE 0x0004
+#define FB_UNSERIALIZE_MAX_DEPTH_EXCEEDED        0x0005
 
 #ifdef FACEBOOK
 # define HHVM_FACEBOOK true
@@ -705,7 +706,10 @@ int fb_compact_unserialize_int64_from_buffer(
 const StaticString s_empty("");
 
 int fb_compact_unserialize_from_buffer(
-  Variant& out, const char* buf, int n, int& p) {
+    Variant& out, const char* buf, int n, int& p, size_t depth) {
+  if (UNLIKELY(depth > 1024)) {
+    return FB_UNSERIALIZE_MAX_DEPTH_EXCEEDED;
+  }
 
   CHECK_ENOUGH(1, p, n);
   int code = (unsigned char)buf[p];
@@ -774,7 +778,8 @@ int fb_compact_unserialize_from_buffer(
       Array arr = Array::CreateVArray();
       while (p < n && buf[p] != (char)(kCodePrefix | FB_CS_STOP)) {
         Variant value;
-        int err = fb_compact_unserialize_from_buffer(value, buf, n, p);
+        int err =
+          fb_compact_unserialize_from_buffer(value, buf, n, p, depth + 1);
         if (err) {
           return err;
         }
@@ -799,7 +804,8 @@ int fb_compact_unserialize_from_buffer(
           ++p;
         } else {
           Variant value;
-          int err = fb_compact_unserialize_from_buffer(value, buf, n, p);
+          int err =
+            fb_compact_unserialize_from_buffer(value, buf, n, p, depth + 1);
           if (err) {
             return err;
           }
@@ -820,12 +826,12 @@ int fb_compact_unserialize_from_buffer(
       Array arr = Array::CreateDArray();
       while (p < n && buf[p] != (char)(kCodePrefix | FB_CS_STOP)) {
         Variant key;
-        int err = fb_compact_unserialize_from_buffer(key, buf, n, p);
+        int err = fb_compact_unserialize_from_buffer(key, buf, n, p, depth + 1);
         if (err) {
           return err;
         }
         Variant value;
-        err = fb_compact_unserialize_from_buffer(value, buf, n, p);
+        err = fb_compact_unserialize_from_buffer(value, buf, n, p, depth + 1);
         if (err) {
           return err;
         }
@@ -861,7 +867,7 @@ Variant fb_compact_unserialize(const char* str, int len,
 
   Variant ret;
   int p = 0;
-  int err = fb_compact_unserialize_from_buffer(ret, str, len, p);
+  int err = fb_compact_unserialize_from_buffer(ret, str, len, p, 0);
   if (err) {
     success = false;
     errcode = err;
@@ -1313,6 +1319,7 @@ struct FBExtension : Extension {
     HHVM_RC_INT_SAME(FB_UNSERIALIZE_UNEXPECTED_END);
     HHVM_RC_INT_SAME(FB_UNSERIALIZE_UNRECOGNIZED_OBJECT_TYPE);
     HHVM_RC_INT_SAME(FB_UNSERIALIZE_UNEXPECTED_ARRAY_KEY_TYPE);
+    HHVM_RC_INT_SAME(FB_UNSERIALIZE_MAX_DEPTH_EXCEEDED);
 
     HHVM_RC_INT(FB_SERIALIZE_HACK_ARRAYS, k_FB_SERIALIZE_HACK_ARRAYS);
     HHVM_RC_INT(FB_SERIALIZE_VARRAY_DARRAY, k_FB_SERIALIZE_VARRAY_DARRAY);
diff --git a/hphp/test/slow/ext_fb/unserialize-bad-set.php b/hphp/test/slow/ext_fb/unserialize-bad-set.php
new file mode 100644
index 00000000000..ce3f4306353
--- /dev/null
+++ b/hphp/test/slow/ext_fb/unserialize-bad-set.php
@@ -0,0 +1,9 @@
+>
+function main() {
+  $ret = null;
+  var_dump(fb_unserialize("\x14\x02\x01\x14\x02\x01\x02\x01\x01\x01", inout $ret));
+  var_dump($ret);
+}
diff --git a/hphp/test/slow/ext_fb/unserialize-bad-set.php.expect b/hphp/test/slow/ext_fb/unserialize-bad-set.php.expect
new file mode 100644
index 00000000000..74d3e6d8268
--- /dev/null
+++ b/hphp/test/slow/ext_fb/unserialize-bad-set.php.expect
@@ -0,0 +1,2 @@
+bool(false)
+bool(false)
diff --git a/hphp/test/slow/ext_fb/unserialize_max_depth.php b/hphp/test/slow/ext_fb/unserialize_max_depth.php
new file mode 100644
index 00000000000..b29c7a6bab5
--- /dev/null
+++ b/hphp/test/slow/ext_fb/unserialize_max_depth.php
@@ -0,0 +1,53 @@
+>
+function main() {
+  tests(10);
+  tests(1026);
+}
diff --git a/hphp/test/slow/ext_fb/unserialize_max_depth.php.expect b/hphp/test/slow/ext_fb/unserialize_max_depth.php.expect
new file mode 100644
index 00000000000..b45fbb89b62
--- /dev/null
+++ b/hphp/test/slow/ext_fb/unserialize_max_depth.php.expect
@@ -0,0 +1,179 @@
+dict(1) {
+  [1]=>
+  dict(1) {
+    [1]=>
+    dict(1) {
+      [1]=>
+      dict(1) {
+        [1]=>
+        dict(1) {
+          [1]=>
+          dict(1) {
+            [1]=>
+            dict(1) {
+              [1]=>
+              dict(1) {
+                [1]=>
+                dict(1) {
+                  [1]=>
+                  dict(1) {
+                    [1]=>
+                    int(1)
+                  }
+                }
+              }
+            }
+          }
+        }
+      }
+    }
+  }
+}
+bool(true)
+vec(1) {
+  vec(1) {
+    vec(1) {
+      vec(1) {
+        vec(1) {
+          vec(1) {
+            vec(1) {
+              vec(1) {
+                vec(1) {
+                  vec(0) {
+                  }
+                }
+              }
+            }
+          }
+        }
+      }
+    }
+  }
+}
+bool(true)
+vec(1) {
+  vec(1) {
+    vec(1) {
+      vec(1) {
+        vec(1) {
+          vec(1) {
+            vec(1) {
+              vec(1) {
+                vec(1) {
+                  vec(1) {
+                    int(1)
+                  }
+                }
+              }
+            }
+          }
+        }
+      }
+    }
+  }
+}
+bool(true)
+array(1) {
+  [1]=>
+  array(1) {
+    [1]=>
+    array(1) {
+      [1]=>
+      array(1) {
+        [1]=>
+        array(1) {
+          [1]=>
+          array(1) {
+            [1]=>
+            array(1) {
+              [1]=>
+              array(1) {
+                [1]=>
+                array(1) {
+                  [1]=>
+                  array(0) {
+                  }
+                }
+              }
+            }
+          }
+        }
+      }
+    }
+  }
+}
+bool(true)
+array(1) {
+  [1]=>
+  array(1) {
+    [1]=>
+    array(1) {
+      [1]=>
+      array(1) {
+        [1]=>
+        array(1) {
+          [1]=>
+          array(1) {
+            [1]=>
+            array(1) {
+              [1]=>
+              array(1) {
+                [1]=>
+                array(1) {
+                  [1]=>
+                  array(1) {
+                    [1]=>
+                    int(1)
+                  }
+                }
+              }
+            }
+          }
+        }
+      }
+    }
+  }
+}
+bool(true)
+array(1) {
+  [0]=>
+  array(1) {
+    [0]=>
+    array(1) {
+      [0]=>
+      array(1) {
+        [0]=>
+        array(1) {
+          [0]=>
+          array(1) {
+            [0]=>
+            array(1) {
+              [0]=>
+              array(1) {
+                [0]=>
+                array(1) {
+                  [0]=>
+                  array(0) {
+                  }
+                }
+              }
+            }
+          }
+        }
+      }
+    }
+  }
+}
+bool(true)
+bool(false)
+bool(false)
+bool(false)
+bool(false)
+bool(false)
+bool(false)
+bool(false)
+bool(false)
+bool(false)
+bool(false)
+bool(false)
+bool(false)
\ No newline at end of file
