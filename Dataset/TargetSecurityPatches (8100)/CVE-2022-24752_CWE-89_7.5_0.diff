73d0791d0575f955e830a3da4c3345f420d2f784
Sylius@@SyliusGridBundle
diff --git a/src/Bundle/Resources/config/services.xml b/src/Bundle/Resources/config/services.xml
index c6a98d17..f22384c9 100644
--- a/src/Bundle/Resources/config/services.xml
+++ b/src/Bundle/Resources/config/services.xml
@@ -46,7 +46,12 @@
             


-        
+        
+        
+        
+            
+            
+        



diff --git a/src/Component/Sorting/Sorter.php b/src/Component/Sorting/Sorter.php
index 139387d0..152312b1 100644
--- a/src/Component/Sorting/Sorter.php
+++ b/src/Component/Sorting/Sorter.php
@@ -13,19 +13,37 @@
 
 namespace Sylius\Component\Grid\Sorting;
 
+use Sylius\Component\Grid\Validation\FieldValidator;
+use Sylius\Component\Grid\Validation\SortingParametersValidator;
 use Sylius\Component\Grid\Data\DataSourceInterface;
 use Sylius\Component\Grid\Definition\Grid;
 use Sylius\Component\Grid\Parameters;
+use Sylius\Component\Grid\Validation\SortingParametersValidatorInterface;
+use Sylius\Component\Grid\Validation\FieldValidatorInterface;
 
 final class Sorter implements SorterInterface
 {
+    private SortingParametersValidatorInterface $sortingValidator;
+
+    private FieldValidatorInterface $fieldValidator;
+
+    public function __construct(?SortingParametersValidatorInterface $sortingValidator = null, ?FieldValidatorInterface $fieldValidator = null)
+    {
+        $this->sortingValidator = $sortingValidator ?? new SortingParametersValidator();
+        $this->fieldValidator = $fieldValidator ?? new FieldValidator();
+    }
+
     public function sort(DataSourceInterface $dataSource, Grid $grid, Parameters $parameters): void
     {
+        $enabledFields = $grid->getEnabledFields();
+
         $expressionBuilder = $dataSource->getExpressionBuilder();
 
         $sorting = $parameters->get('sorting', $grid->getSorting());
+        $this->sortingValidator->validateSortingParameters($sorting, $enabledFields);
 
         foreach ($sorting as $field => $order) {
+            $this->fieldValidator->validateFieldName($field, $enabledFields);
             $gridField = $grid->getField($field);
             $property = $gridField->getSortable();
 
diff --git a/src/Component/Validation/FieldValidator.php b/src/Component/Validation/FieldValidator.php
new file mode 100644
index 00000000..7b89c0ff
--- /dev/null
+++ b/src/Component/Validation/FieldValidator.php
@@ -0,0 +1,28 @@
+beConstructedWith($sortingValidator, $fieldValidator);
+    }
+
     function it_implements_grid_data_source_sorter_interface(): void
     {
         $this->shouldImplement(SorterInterface::class);
@@ -30,58 +37,58 @@ function it_implements_grid_data_source_sorter_interface(): void
 
     function it_sorts_the_data_source_via_expression_builder_based_on_the_grid_definition(
         Grid $grid,
-        Field $nameField,
-        Field $nonSortableField,
+        Field $field,
+        Field $anotherField,
         DataSourceInterface $dataSource,
-        ExpressionBuilderInterface $expressionBuilder
+        ExpressionBuilderInterface $expressionBuilder,
+        SortingParametersValidatorInterface $sortingValidator,
+        FieldValidatorInterface $fieldValidator
     ): void {
         $parameters = new Parameters();
 
         $dataSource->getExpressionBuilder()->willReturn($expressionBuilder);
 
-        $grid->getSorting()->willReturn(['name' => 'desc', 'non_sortable_field' => 'asc']);
+        $grid->getSorting()->willReturn(['name' => 'desc']);
+        $grid->getEnabledFields()->willReturn(['name'=> $field, 'code' => $anotherField]);
 
-        $grid->hasField('name')->willReturn(true);
-        $grid->getField('name')->willReturn($nameField);
-        $nameField->isSortable()->willReturn(true);
-        $nameField->getSortable()->willReturn('translation.name');
+        $sortingValidator->validateSortingParameters(['name' => 'desc'], ['name' => $field , 'code' => $anotherField])->shouldBeCalled();
+        $fieldValidator->validateFieldName('name', ['name' => $field , 'code' => $anotherField])->shouldBeCalled();
 
-        $grid->hasField('non_sortable_field')->willReturn(true);
-        $grid->getField('non_sortable_field')->willReturn($nonSortableField);
-        $nonSortableField->isSortable()->willReturn(false);
-        $nonSortableField->getSortable()->willReturn(null);
+        $grid->hasField('name')->willReturn(true);
+        $grid->getField('name')->willReturn($field);
+        $field->isSortable()->willReturn(true);
+        $field->getSortable()->willReturn('translation.name');
 
         $expressionBuilder->addOrderBy('translation.name', 'desc')->shouldBeCalled();
-        $expressionBuilder->addOrderBy(null, 'asc')->shouldNotBeCalled();
 
         $this->sort($dataSource, $grid, $parameters);
     }
 
     function it_sorts_the_data_source_via_expression_builder_based_on_sorting_parameter(
         Grid $grid,
-        Field $nameField,
-        Field $nonSortableField,
+        Field $field,
+        Field $anotherField,
         DataSourceInterface $dataSource,
-        ExpressionBuilderInterface $expressionBuilder
+        ExpressionBuilderInterface $expressionBuilder,
+        SortingParametersValidatorInterface $sortingValidator,
+        FieldValidatorInterface $fieldValidator
     ): void {
-        $parameters = new Parameters(['sorting' => ['name' => 'asc', 'non_sortable_field' => 'asc']]);
+        $parameters = new Parameters(['sorting' => ['name' => 'asc']]);
 
         $dataSource->getExpressionBuilder()->willReturn($expressionBuilder);
 
-        $grid->getSorting()->willReturn(['code' => 'desc']);
+        $grid->getSorting()->willReturn(['code' => 'asc']);
+        $grid->getEnabledFields()->willReturn(['name' => $field , 'code' => $anotherField]);
 
-        $grid->hasField('name')->willReturn(true);
-        $grid->getField('name')->willReturn($nameField);
-        $nameField->isSortable()->willReturn(true);
-        $nameField->getSortable()->willReturn('translation.name');
+        $sortingValidator->validateSortingParameters(['name' => 'asc'], ['name' => $field , 'code' => $anotherField])->shouldBeCalled();
+        $fieldValidator->validateFieldName('name', ['name' => $field , 'code' => $anotherField])->shouldBeCalled();
 
-        $grid->hasField('non_sortable_field')->willReturn(true);
-        $grid->getField('non_sortable_field')->willReturn($nonSortableField);
-        $nonSortableField->isSortable()->willReturn(false);
-        $nonSortableField->getSortable()->willReturn(null);
+        $grid->hasField('name')->willReturn(true);
+        $grid->getField('name')->willReturn($field);
+        $field->isSortable()->willReturn(true);
+        $field->getSortable()->willReturn('translation.name');
 
         $expressionBuilder->addOrderBy('translation.name', 'asc')->shouldBeCalled();
-        $expressionBuilder->addOrderBy(null, 'asc')->shouldNotBeCalled();
 
         $this->sort($dataSource, $grid, $parameters);
     }
diff --git a/src/Component/spec/Validation/FieldValidatorSpec.php b/src/Component/spec/Validation/FieldValidatorSpec.php
new file mode 100644
index 00000000..efacef0b
--- /dev/null
+++ b/src/Component/spec/Validation/FieldValidatorSpec.php
@@ -0,0 +1,56 @@
+shouldImplement(FieldValidatorInterface::class);
+    }
+
+    function it_throws_exception_if_wrong_field_name_provided(
+        Grid $grid,
+        Field $field,
+        Field $anotherField
+    ): void {
+        $grid->getEnabledFields()->willReturn(['name' => $field , 'code' => $anotherField]);
+        $grid->getSorting()->willReturn(['sorting' => ['non_sortable_field' => 'desc']]);
+
+        $this
+            ->shouldThrow(new BadRequestHttpException('non_sortable_field is not valid field, did you mean one of these: name, code?'))
+            ->during('validateFieldName', ['non_sortable_field', ['name' => $field , 'code' => $anotherField]])
+        ;
+    }
+
+    function it_passes_if_valid_sorting_parameter_provided(
+        Grid $grid,
+        Field $field,
+        Field $anotherField
+    ): void {
+        $grid->getEnabledFields()->willReturn(['name' => $field , 'code' => $anotherField]);
+        $grid->getSorting()->willReturn(['sorting' => ['sortable_field' => 'desc']]);
+
+        $this
+            ->shouldNotThrow(new BadRequestHttpException())
+            ->during('validateFieldName', ['sortable_field', ['sortable_field' => $field , 'code' => $anotherField]])
+        ;
+    }
+}
diff --git a/src/Component/spec/Validation/SortingParametersValidatorSpec.php b/src/Component/spec/Validation/SortingParametersValidatorSpec.php
new file mode 100644
index 00000000..ba19d3d3
--- /dev/null
+++ b/src/Component/spec/Validation/SortingParametersValidatorSpec.php
@@ -0,0 +1,56 @@
+shouldImplement(SortingParametersValidatorInterface::class);
+    }
+
+    function it_throws_exception_if_wrong_sorting_parameter_provided(
+        Grid $grid,
+        Field $field,
+        Field $anotherField
+    ): void {
+        $grid->getEnabledFields()->willReturn(['name' => $field , 'code' => $anotherField]);
+        $grid->getSorting()->willReturn(['name' => 'non_sortable_parameter']);
+
+        $this
+            ->shouldThrow(new BadRequestHttpException('non_sortable_parameter is not valid, use asc or desc instead.'))
+            ->during('validateSortingParameters', [['name' => 'non_sortable_parameter'], ['name' => $field , 'code' => $anotherField]])
+        ;
+    }
+
+    function it_passes_if_valid_sorting_parameter_provided(
+        Grid $grid,
+        Field $field,
+        Field $anotherField
+    ): void {
+        $grid->getEnabledFields()->willReturn(['name' => $field , 'code' => $anotherField]);
+        $grid->getSorting()->willReturn(['name' => 'asc']);
+
+        $this
+            ->shouldNotThrow(new BadRequestHttpException())
+            ->during('validateSortingParameters', [['name' => 'asc'], ['name' => $field , 'code' => $anotherField]])
+        ;
+    }
+}
