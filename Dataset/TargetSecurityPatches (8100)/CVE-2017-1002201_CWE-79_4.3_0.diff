18576ae6e9bdcb4303fdbe6b3199869d289d67c2
haml@@haml
diff --git a/lib/haml/helpers.rb b/lib/haml/helpers.rb
index aa26c4c4a2..48c585cb04 100644
--- a/lib/haml/helpers.rb
+++ b/lib/haml/helpers.rb
@@ -596,7 +596,7 @@ def haml_tag_if(condition, *tag)
     # Characters that need to be escaped to HTML entities from user input
     HTML_ESCAPE = { '&' => '&', '<' => '<', '>' => '>', '"' => '"', "'" => ''' }
 
-    HTML_ESCAPE_REGEX = /[\"><&]/
+    HTML_ESCAPE_REGEX = /['"><&]/
 
     # Returns a copy of `text` with ampersands, angle brackets and quotes
     # escaped into HTML entities.
diff --git a/test/engine_test.rb b/test/engine_test.rb
index 777790ff0f..73e7abaa1e 100644
--- a/test/engine_test.rb
+++ b/test/engine_test.rb
@@ -1127,8 +1127,8 @@ def test_doctypes
   def test_attr_wrapper
     assert_equal("\n", render("%p{ :strange => 'attrs'}", :attr_wrapper => '*'))
     assert_equal("\n", render("%p{ :escaped => 'quo\"te'}", :attr_wrapper => '"'))
-    assert_equal("\n", render("%p{ :escaped => 'quo\\'te'}", :attr_wrapper => '"'))
-    assert_equal("\n", render("%p{ :escaped => 'q\\'uo\"te'}", :attr_wrapper => '"'))
+    assert_equal("\n", render("%p{ :escaped => 'quo\\'te'}", :attr_wrapper => '"'))
+    assert_equal("\n", render("%p{ :escaped => 'q\\'uo\"te'}", :attr_wrapper => '"'))
     assert_equal("\n", render("!!! XML", :attr_wrapper => '"', :format => :xhtml))
   end
 
@@ -1534,7 +1534,7 @@ def test_html5_data_attributes_without_hyphenation
       render("%div{:data => {:one_plus_one => 1+1}}",
         :hyphenate_data_attrs => false))
 
-    assert_equal("\n",
+    assert_equal("\n",
       render(%{%div{:data => {:foo => %{Here's a "quoteful" string.}}}},
         :hyphenate_data_attrs => false)) #'
   end
@@ -1698,9 +1698,9 @@ def test_truthy_new_attributes
   def test_new_attribute_parsing
     assert_equal("bar\n", render("%a(a2=b2) bar", :locals => {:b2 => 'b2'}))
     assert_equal(%Q{bar\n}, render(%q{%a(a="#{'foo"bar'}") bar})) #'
-    assert_equal(%Q{bar\n}, render(%q{%a(a="#{"foo'bar"}") bar})) #'
+    assert_equal(%Q{bar\n}, render(%q{%a(a="#{"foo'bar"}") bar})) #'
     assert_equal(%Q{bar\n}, render(%q{%a(a='foo"bar') bar}))
-    assert_equal(%Q{bar\n}, render(%q{%a(a="foo'bar") bar}))
+    assert_equal(%Q{bar\n}, render(%q{%a(a="foo'bar") bar}))
     assert_equal("bar\n", render("%a(a:b='foo') bar"))
     assert_equal("bar\n", render("%a(a = 'foo' b = 'bar') bar"))
     assert_equal("bar\n", render("%a(a = foo b = bar) bar", :locals => {:foo => 'foo', :bar => 'bar'}))
@@ -1713,8 +1713,8 @@ def test_new_attribute_escaping
     assert_equal(%Q{bar\n}, render(%q{%a(a="foo \" bar") bar}))
     assert_equal(%Q{bar\n}, render(%q{%a(a="foo \\\\\" bar") bar}))
 
-    assert_equal(%Q{bar\n}, render(%q{%a(a='foo \' bar') bar}))
-    assert_equal(%Q{bar\n}, render(%q{%a(a='foo \\\\\' bar') bar}))
+    assert_equal(%Q{bar\n}, render(%q{%a(a='foo \' bar') bar}))
+    assert_equal(%Q{bar\n}, render(%q{%a(a='foo \\\\\' bar') bar}))
 
     assert_equal(%Q{bar\n}, render(%q{%a(a="foo \\\\ bar") bar}))
     assert_equal(%Q{bar\n}, render(%q{%a(a="foo \#{1 + 1} bar") bar}))
diff --git a/test/pretty_engine_test.rb b/test/pretty_engine_test.rb
index 9e8963db2b..6c1a77a3f4 100644
--- a/test/pretty_engine_test.rb
+++ b/test/pretty_engine_test.rb
@@ -1129,8 +1129,8 @@ def test_doctypes
   def test_attr_wrapper
     assert_equal("\n", render("%p{ :strange => 'attrs'}", :attr_wrapper => '*'))
     assert_equal("\n", render("%p{ :escaped => 'quo\"te'}", :attr_wrapper => '"'))
-    assert_equal("\n", render("%p{ :escaped => 'quo\\'te'}", :attr_wrapper => '"'))
-    assert_equal("\n", render("%p{ :escaped => 'q\\'uo\"te'}", :attr_wrapper => '"'))
+    assert_equal("\n", render("%p{ :escaped => 'quo\\'te'}", :attr_wrapper => '"'))
+    assert_equal("\n", render("%p{ :escaped => 'q\\'uo\"te'}", :attr_wrapper => '"'))
     assert_equal("\n", render("!!! XML", :attr_wrapper => '"', :format => :xhtml))
   end
 
@@ -1527,7 +1527,7 @@ def test_html5_data_attributes_without_hyphenation
       render("%div{:data => {:one_plus_one => 1+1}}",
         :hyphenate_data_attrs => false))
 
-    assert_equal("\n",
+    assert_equal("\n",
       render(%{%div{:data => {:foo => %{Here's a "quoteful" string.}}}},
         :hyphenate_data_attrs => false)) #'
   end
@@ -1691,9 +1691,9 @@ def test_truthy_new_attributes
   def test_new_attribute_parsing
     assert_equal("bar\n", render("%a(a2=b2) bar", :locals => {:b2 => 'b2'}))
     assert_equal(%Q{bar\n}, render(%q{%a(a="#{'foo"bar'}") bar})) #'
-    assert_equal(%Q{bar\n}, render(%q{%a(a="#{"foo'bar"}") bar})) #'
+    assert_equal(%Q{bar\n}, render(%q{%a(a="#{"foo'bar"}") bar})) #'
     assert_equal(%Q{bar\n}, render(%q{%a(a='foo"bar') bar}))
-    assert_equal(%Q{bar\n}, render(%q{%a(a="foo'bar") bar}))
+    assert_equal(%Q{bar\n}, render(%q{%a(a="foo'bar") bar}))
     assert_equal("bar\n", render("%a(a:b='foo') bar"))
     assert_equal("bar\n", render("%a(a = 'foo' b = 'bar') bar"))
     assert_equal("bar\n", render("%a(a = foo b = bar) bar", :locals => {:foo => 'foo', :bar => 'bar'}))
@@ -1706,8 +1706,8 @@ def test_new_attribute_escaping
     assert_equal(%Q{bar\n}, render(%q{%a(a="foo \" bar") bar}))
     assert_equal(%Q{bar\n}, render(%q{%a(a="foo \\\\\" bar") bar}))
 
-    assert_equal(%Q{bar\n}, render(%q{%a(a='foo \' bar') bar}))
-    assert_equal(%Q{bar\n}, render(%q{%a(a='foo \\\\\' bar') bar}))
+    assert_equal(%Q{bar\n}, render(%q{%a(a='foo \' bar') bar}))
+    assert_equal(%Q{bar\n}, render(%q{%a(a='foo \\\\\' bar') bar}))
 
     assert_equal(%Q{bar\n}, render(%q{%a(a="foo \\\\ bar") bar}))
     assert_equal(%Q{bar\n}, render(%q{%a(a="foo \#{1 + 1} bar") bar}))
diff --git a/test/pretty_results/just_stuff.xhtml b/test/pretty_results/just_stuff.xhtml
index 0df460f84d..d7d166d318 100644
--- a/test/pretty_results/just_stuff.xhtml
+++ b/test/pretty_results/just_stuff.xhtml
@@ -6,7 +6,7 @@
 


-Boo!
+Boo!
 Embedded? false!
 Embedded? true!
 Embedded? true!
@@ -61,7 +61,7 @@ testtest
 Blump
Whee
 Woah inner quotes
-
+


   hello
diff --git a/test/results/just_stuff.xhtml b/test/results/just_stuff.xhtml
index d31dd78ba9..742040d207 100644
--- a/test/results/just_stuff.xhtml
+++ b/test/results/just_stuff.xhtml
@@ -6,7 +6,7 @@
 


-Boo!
+Boo!
 Embedded? false!
 Embedded? true!
 Embedded? true!
@@ -61,7 +61,7 @@ Nested content
 Blump
Whee
 Woah inner quotes
-
+


 hello
