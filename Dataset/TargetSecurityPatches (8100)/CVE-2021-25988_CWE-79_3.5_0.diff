720a47015e46ad387b3219fed7ebfb14ec3c854c
ifmeorg@@ifme
diff --git a/app/controllers/notifications_controller.rb b/app/controllers/notifications_controller.rb
index d5b9b2c68..33e82827c 100644
--- a/app/controllers/notifications_controller.rb
+++ b/app/controllers/notifications_controller.rb
@@ -46,6 +46,7 @@ def convert_to_hash(string_obj)
   def render_notification(notification)
     uniqueid = notification[:uniqueid]
     data = convert_to_hash(notification[:data])
+    data[:email] = User.find(data[:user_id]).email # In case data[:name] is invalid
     case data[:type]
     when /comment/ then comment_link(uniqueid, data)
     when /accepted_ally_request/ then accepted_ally_link(uniqueid, data)
diff --git a/app/helpers/notifications_helper.rb b/app/helpers/notifications_helper.rb
index 32925b4c2..927ff0aac 100644
--- a/app/helpers/notifications_helper.rb
+++ b/app/helpers/notifications_helper.rb
@@ -6,7 +6,7 @@ def comment_link(uniqueid, data)
     i18n_key = data[:cutoff] ? 'truncated' : 'full'
     notification = t(
       "notifications.comment.#{i18n_key}",
-      name: data[:user],
+      name: name_or_email(data),
       comment: strip_tags(data[:comment]),
       typename: data[:typename]
     )
@@ -16,7 +16,7 @@ def comment_link(uniqueid, data)
   def accepted_ally_link(uniqueid, data)
     notification = t(
       'notifications.ally.accepted',
-      name: data[:user]
+      name: name_or_email(data)
     )
     link = "/profile?uid=#{data[:uid]}"
     notification_link(uniqueid, link, notification)
@@ -24,7 +24,7 @@ def accepted_ally_link(uniqueid, data)
 
   def new_ally_request_link(uniqueid, data)
     link = "/profile?uid=#{data[:uid]}"
-    link_html = "#{data[:user]}"
+    link_html = "#{name_or_email(data)}"
     # rubocop:disable Layout/LineLength
     "#{t('notifications.ally.sent_html', link_to_user: link_html)}#{request_actions(data[:user_id])}"
     # rubocop:enable Layout/LineLength
@@ -33,7 +33,7 @@ def new_ally_request_link(uniqueid, data)
   def group_link(uniqueid, data)
     notification = t(
       "notifications.group.#{data[:type]}",
-      name: data[:user],
+      name: name_or_email(data),
       group_name: data[:group]
     )
     link = "/groups/#{data[:group_id]}"
@@ -43,7 +43,7 @@ def group_link(uniqueid, data)
   def meeting_link(uniqueid, data)
     notification = t(
       "notifications.meeting.#{data[:type]}",
-      name: data[:user],
+      name: name_or_email(data),
       group_name: data[:group],
       meeting_name: data[:typename]
     )
@@ -97,4 +97,8 @@ def comment_for_type(data)
   def notification_link(uniqueid, link, notification)
     "#{notification}"
   end
+
+  def name_or_email(data)
+    sanitize(data[:user]).presence || data[:email]
+  end
 end
diff --git a/spec/factories/notification.rb b/spec/factories/notification.rb
index 3ef5a090a..da5a841be 100644
--- a/spec/factories/notification.rb
+++ b/spec/factories/notification.rb
@@ -1,22 +1,17 @@
 # frozen_string_literal: true
-data = {
-  cutoff: false,
-  user: 'Julia Nguyen',
-  comment: 'Hello',
-  typename: 'typename',
-  type: 'type_comment_moment',
-  typeid: 1,
-  commentable_id: 1
-}
 
 FactoryBot.define do
   factory :notification do
+    data = {
+      cutoff: false,
+      user: 'Almond Butters',
+      comment: 'Hello',
+      typename: 'typename',
+      type: 'type_comment_moment',
+      typeid: 1,
+      commentable_id: 1,
+    }
     uniqueid { 'MyString' }
     data { data.to_json }
-    user_id { 1 }
-
-    trait :with_user do
-      association :user, factory: :user
-    end
   end
 end
diff --git a/spec/helpers/notifications_helper_spec.rb b/spec/helpers/notifications_helper_spec.rb
index 5a6476785..ca0fea7db 100644
--- a/spec/helpers/notifications_helper_spec.rb
+++ b/spec/helpers/notifications_helper_spec.rb
@@ -4,7 +4,7 @@
   let(:uniqueid) { 'uniqueid' }
 
   describe '#comment_link' do
-    it 'returns correct link' do
+    it 'returns the correct link' do
       data = {
         cutoff: false,
         user: 'Julia Nguyen',
@@ -16,20 +16,43 @@
       }
       expect(comment_link(uniqueid, data)).to eq('Julia Nguyen commented "Hello" on typename')
     end
+
+    it 'sanitizes and returns the correct link' do
+      data = {
+        cutoff: false,
+        user: '',
+        email: 'julia@example.com',
+        comment: 'Hello',
+        typename: 'typename',
+        type: 'type_comment_moment',
+        typeid: 1,
+        commentable_id: 1
+      }
+      expect(comment_link(uniqueid, data)).to eq('julia@example.com commented "Hello" on typename')
+    end
   end
 
   describe '#accepted_ally_link' do
-    it 'returns correct link' do
+    it 'returns the correct link' do
       data = {
         user: 'Julia Nguyen',
         uid: 'uid'
       }
       expect(accepted_ally_link(uniqueid, data)).to eq('Julia Nguyen accepted your ally request!')
     end
+
+    it 'sanitizes and returns the correct link' do
+      data = {
+        user: '',
+        email: 'julia@example.com',
+        uid: 'uid'
+      }
+      expect(accepted_ally_link(uniqueid, data)).to eq('julia@example.com accepted your ally request!')
+    end
   end
 
   describe '#new_ally_request_link' do
-    it 'returns correct link' do
+    it 'returns the correct link' do
       data = {
         user: 'Julia Nguyen',
         uid: 'uid',
@@ -37,6 +60,16 @@
       }
       expect(new_ally_request_link(uniqueid, data)).to eq('<a href="/profile?uid=uid">Julia Nguyen</a> sent an ally request!Accept | Reject')
     end
+
+    it 'sanitizes and returns the correct link' do
+      data = {
+        user: '',
+        email: 'julia@example.com',
+        uid: 'uid',
+        user_id: 1
+      }
+      expect(new_ally_request_link(uniqueid, data)).to eq('<a href="/profile?uid=uid">julia@example.com</a> sent an ally request!Accept | Reject')
+    end
   end
 
   describe '#group_link' do
@@ -48,32 +81,57 @@
         group_id: 1
       }
     end
+    let(:dirty_data) do
+      {
+        type: type,
+        user: '',
+        email: 'julia@example.com',
+        group: 'Group name',
+        group_id: 1
+      }
+    end
     context 'type is new_group' do
       let(:type) { 'new_group' }
-      it 'returns correct link' do
+      it 'returns the correct link' do
         expect(group_link(uniqueid, data)).to eq('Julia Nguyen created a group "Group name"')
       end
+
+      it 'sanitizes and returns the correct link' do
+        expect(group_link(uniqueid, dirty_data)).to eq('julia@example.com created a group "Group name"')
+      end
     end
 
     context 'type is new_group_member' do
       let(:type) { 'new_group_member' }
-      it 'returns correct link' do
+      it 'returns the correct link' do
         expect(group_link(uniqueid, data)).to eq('Julia Nguyen joined your group "Group name"')
       end
+
+      it 'sanitizes and returns the correct link' do
+        expect(group_link(uniqueid, dirty_data)).to eq('julia@example.com joined your group "Group name"')
+      end
     end
 
     context 'type is add_group_leader' do
       let(:type) { 'add_group_leader' }
-      it 'returns correct link' do
+      it 'returns the correct link' do
         expect(group_link(uniqueid, data)).to eq('Julia Nguyen became a leader of "Group name"')
       end
+
+      it 'sanitizes and returns the correct link' do
+        expect(group_link(uniqueid, dirty_data)).to eq('julia@example.com became a leader of "Group name"')
+      end
     end
 
     context 'type is remove_group_leader' do
       let(:type) { 'remove_group_leader' }
-      it 'returns correct link' do
+      it 'returns the correct link' do
         expect(group_link(uniqueid, data)).to eq('Julia Nguyen is no longer a leader of "Group name"')
       end
+
+      it 'sanitizes and returns the correct link' do
+        expect(group_link(uniqueid, dirty_data)).to eq('julia@example.com is no longer a leader of "Group name"')
+      end
     end
   end
 
@@ -88,32 +146,59 @@
         typeid: 1
       }
     end
+    let(:dirty_data) do
+      {
+        type: type,
+        user: '',
+        email: 'julia@example.com',
+        group: 'Group name',
+        typename: 'Meeting name',
+        group_id: 1,
+        typeid: 1
+      }
+    end
     context 'type is new_meeting' do
       let(:type) { 'new_meeting' }
-      it 'returns correct link' do
+      it 'returns the correct link' do
         expect(meeting_link(uniqueid, data)).to eq('Julia Nguyen created a new meeting "Meeting name" for "Group name"')
       end
+
+      it 'sanitizes and returns the correct link' do
+        expect(meeting_link(uniqueid, dirty_data)).to eq('julia@example.com created a new meeting "Meeting name" for "Group name"')
+      end
     end
 
     context 'type is remove_meeting' do
       let(:type) { 'remove_meeting' }
-      it 'returns correct link' do
+      it 'returns the correct link' do
         expect(meeting_link(uniqueid, data)).to eq('Julia Nguyen has cancelled "Meeting name" for "Group name"')
       end
+
+      it 'sanitizes and returns the correct link' do
+        expect(meeting_link(uniqueid, dirty_data)).to eq('julia@example.com has cancelled "Meeting name" for "Group name"')
+      end
     end
 
     context 'type is update_meeting' do
       let(:type) { 'update_meeting' }
-      it 'returns correct link' do
+      it 'returns the correct link' do
         expect(meeting_link(uniqueid, data)).to eq('Julia Nguyen has updated "Meeting name" for "Group name"')
       end
+
+      it 'sanitizes and returns the correct link' do
+        expect(meeting_link(uniqueid, dirty_data)).to eq('julia@example.com has updated "Meeting name" for "Group name"')
+      end
     end
 
     context 'type is join_meeting' do
       let(:type) { 'join_meeting' }
-      it 'returns correct link' do
+      it 'returns the correct link' do
         expect(meeting_link(uniqueid, data)).to eq('Julia Nguyen has joined "Meeting name" for "Group name"')
       end
+
+      it 'sanitizes and returns the correct link' do
+        expect(meeting_link(uniqueid, dirty_data)).to eq('julia@example.com has joined "Meeting name" for "Group name"')
+      end
     end
   end
 end
diff --git a/spec/models/notification_spec.rb b/spec/models/notification_spec.rb
index 5c23111cd..94cb5a574 100644
--- a/spec/models/notification_spec.rb
+++ b/spec/models/notification_spec.rb
@@ -13,6 +13,8 @@
 #
 
 describe Notification do
+  let(:user) { create(:user1) }
+
   context 'with relations' do
     it { is_expected.to belong_to :user }
   end
@@ -24,7 +26,7 @@
   end
 
   it 'is valid with valid attributes' do
-    notification = build(:notification)
+    notification = build(:notification, user: user)
 
     expect(notification).to be_valid
   end
diff --git a/spec/requests/notifications_spec.rb b/spec/requests/notifications_spec.rb
index b3d013441..6ba752ba1 100644
--- a/spec/requests/notifications_spec.rb
+++ b/spec/requests/notifications_spec.rb
@@ -195,16 +195,28 @@
   describe '#fetch_notifications' do
     let(:user) { create(:user1) }
     let(:other_user) { create(:user2) }
-    let!(:other_user_notification) { create(:notification, user: other_user) }
-
     context 'when the user is signed in' do
-      let!(:notification) { create(:notification, user: user) }
-      let!(:notification_two) { create(:notification, user: user) }
+      let!(:notification) {
+        create(
+          :notification,
+          user: user,
+          data: {
+            cutoff: false,
+            user: 'Almond Butters',
+            comment: 'Hello',
+            typename: 'typename',
+            type: 'type_comment_moment',
+            typeid: 1,
+            commentable_id: 1,
+            user_id: other_user.id
+          }.to_json
+        )
+      }
       let(:notification_link) do
-        'Julia Nguyen commented "Hello" on typename'
+        'Almond Butters commented "Hello" on typename'
       end
       let(:expected_result) do
-        { fetch_notifications: [notification_link, notification_link] }.to_json
+        { fetch_notifications: [notification_link] }.to_json
       end
 
       before do
