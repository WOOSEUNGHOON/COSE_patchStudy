e7fd8e4c90be490e4293ec91804d00ec01af5ca6
tribe29@@checkmk
diff --git a/cmk/gui/escaping.py b/cmk/gui/escaping.py
index 1761d449e2..03dcdda9ed 100644
--- a/cmk/gui/escaping.py
+++ b/cmk/gui/escaping.py
@@ -30,8 +30,9 @@
 
 _UNESCAPER_TEXT = re.compile(
     r'<(/?)(h1|h2|b|tt|i|u|br(?: /)?|nobr(?: /)?|pre|a|sup|p|li|ul|ol)>')
-_QUOTE = re.compile(r"(?:"|')")
-_A_HREF = re.compile(r'<a href=((?:"|').*?(?:"|'))>')
+_A_HREF = re.compile(
+    r'<a href=(?:(?:"|')(.*?)(?:"|'))(?: target=(?:(?:"|')(.*?)(?:"|')))?>'
+)
 
 
 # TODO: Cleanup the accepted types!
@@ -111,8 +112,16 @@ def escape_text(text: EscapableEntity) -> str:
     text = escape_attribute(text)
     text = _UNESCAPER_TEXT.sub(r'<\1\2>', text)
     for a_href in _A_HREF.finditer(text):
-        text = text.replace(a_href.group(0), u"" % _QUOTE.sub(u"\"", a_href.group(1)))
-    return text.replace(u"&nbsp;", u" ")
+        href = a_href.group(1)
+        target = a_href.group(2)
+
+        if target:
+            unescaped_tag = "" % (href, target)
+        else:
+            unescaped_tag = "" % href
+
+        text = text.replace(a_href.group(0), unescaped_tag)
+    return text.replace("&nbsp;", u" ")
 
 
 def strip_scripts(ht: str) -> str:
diff --git a/tests/unit/cmk/gui/test_htmllib_Escaper.py b/tests/unit/cmk/gui/test_htmllib_Escaper.py
index c96ef1b6ae..3a34499bad 100644
--- a/tests/unit/cmk/gui/test_htmllib_Escaper.py
+++ b/tests/unit/cmk/gui/test_htmllib_Escaper.py
@@ -56,6 +56,9 @@ def test_unescape_attribute(inp, out):
         ("", None),
         ("abc", None),
         ("abc", None),
+        # Links with target 1st and href 2nd will not be unescaped
+        ("abc",
+         "<a target="123" href="xyz">abc"),
         ("blahaaablahbbb", None),
         ("\"I am not a link\" target=\"still not a link\"",
          ""I am not a link" target="still not a link""),
@@ -69,6 +72,8 @@ def test_unescape_attribute(inp, out):
             "abc<script>alert(1)</script>abc",
         ),
         (" ", None),
+        # At the moment also javascript URLs are accepted. This will be refused in the next step
+        ("abc", None),
     ])
 def test_escape_text(inp, out):
     if out is None:
